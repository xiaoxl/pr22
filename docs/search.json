[
  {
    "objectID": "contents/8/08-.html#tibble",
    "href": "contents/8/08-.html#tibble",
    "title": "8  R for Data Sciences",
    "section": "8.1 tibble",
    "text": "8.1 tibble\ntidyverse mainly deals with tibble instead of data.frame. Therefore this is where we start.\ntibble is a data.frame with different attributes and requirements. The package tibble provides support for tibble. It is included in tidyverse. To load it, you just use the code:\n\nlibrary(tidyverse)\n#> ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n#> ✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n#> ✔ tibble  3.1.7     ✔ dplyr   1.0.9\n#> ✔ tidyr   1.2.0     ✔ stringr 1.4.0\n#> ✔ readr   2.1.2     ✔ forcats 0.5.1\n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n\n\n8.1.1 Create tibbles\nHere is an example of creating tibbles.\n\nExample 8.1  \n\ntbl <- tibble(x=1:5, y=1, z=x^2+y)\ntbl\n#> # A tibble: 5 × 3\n#>       x     y     z\n#>   <int> <dbl> <dbl>\n#> 1     1     1     2\n#> 2     2     1     5\n#> 3     3     1    10\n#> 4     4     1    17\n#> 5     5     1    26\nattributes(tbl)\n#> $class\n#> [1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n#> \n#> $row.names\n#> [1] 1 2 3 4 5\n#> \n#> $names\n#> [1] \"x\" \"y\" \"z\"\n\nNote that it is more flexible to create a tibble since tibble() will automatically recycle inputs and allows you to refer to variables that you just created.\n\n\n\n\n\n\n\nNote\n\n\n\nIn the past (for a very long time), when using data.frame() to create a data.frame, it will automatically convert strings to factors. This is changed recently that the default setting is not to convert.\nWhen using tibble() to create a tibble, the type of the inputs will never be changed.\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn tibble you may use nonsyntactic names as column names, which are invalid R variable names. To refer to these variables, you need to surround them with backticks `.\n\ntb <- tibble(\n    `:)` = \"smile\",\n    ` ` = \"space\",\n    `2000` = \"number\"\n)\ntb\n#> # A tibble: 1 × 3\n#>   `:)`  ` `   `2000`\n#>   <chr> <chr> <chr> \n#> 1 smile space number\n\n\n\n\n\n8.1.2 Differences between tibble and data.frame.\n\n8.1.2.1 Printing\nTibbles have a refined print method that shows only the first 10 rows and all the columns that fit on screen.\n\ndeck <- tibble(suit=rep(c('spades', 'hearts', 'clubs', 'diamonds'), 13), face=rep(1:13, 4))\ndeck\n#> # A tibble: 52 × 2\n#>    suit      face\n#>    <chr>    <int>\n#>  1 spades       1\n#>  2 hearts       2\n#>  3 clubs        3\n#>  4 diamonds     4\n#>  5 spades       5\n#>  6 hearts       6\n#>  7 clubs        7\n#>  8 diamonds     8\n#>  9 spades       9\n#> 10 hearts      10\n#> # … with 42 more rows\n\n\n\n8.1.2.2 Subsetting\nTo get a single value, [[]] or $ should be used, just like for data.frame. These two are almost the same. The only difference is that [[]] accepts positions, but $ only accepts names.\nTo be used in a pipe, the special placeholder . will be used.\n\ndeck %>% .$face\n#>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13  1  2  3  4  5  6  7  8  9 10 11 12\n#> [26] 13  1  2  3  4  5  6  7  8  9 10 11 12 13  1  2  3  4  5  6  7  8  9 10 11\n#> [51] 12 13\n\nWe will talk about pipes later.\n\n\n\n8.1.3 %>% symbol\n%>% is the pipeline symbol, which is another way to connect several functions. Most functions in tidyverse have the first argument data, and both the input data and the output are tibbles. The syntax here is that data %>% function(arguments) is the same as function(data, arguments). The benefit is that it is easier to have many functions consecutively applied to the data. Please see the following example.\n\ndata %>% function1(arguments1)\n    %>% function2(arguments2)\n    %>% function3(arguments3)\n    %>% function4(arguments4)\n\nfunction4(function3(function2(function1(data, arguments1), arguments2), arguments3), arguments4)\n\ndata2 <- function1(data, arguments1)\ndata3 <- function2(data2, arguments2)\ndata4 <- function3(data3, arguments3)\nfunction4(data4, arguments4)\n\nThe readability of the first one is much better than the second one. Comparing to the third one, we don’t need to create a lot of intermedia temporary variables."
  },
  {
    "objectID": "contents/8/08-.html#tidy-data",
    "href": "contents/8/08-.html#tidy-data",
    "title": "8  R for Data Sciences",
    "section": "8.2 Tidy Data",
    "text": "8.2 Tidy Data\nThe same underlying data can be represented in multiple ways. The following example shows the same data organized in four different ways.\n\nExample 8.2 These tibbles are provided by tidyr. You could directly load it from tidyverse.\n\nlibrary(tidyverse)\ndata(table1, package='tidyr')\ndata(table2, package='tidyr')\ndata(table3, package='tidyr')\ndata(table4a, package='tidyr')\ndata(table4b, package='tidyr')\n\n\ntable1\n\n\ntable1\n#> # A tibble: 6 × 4\n#>   country      year  cases population\n#>   <chr>       <int>  <int>      <int>\n#> 1 Afghanistan  1999    745   19987071\n#> 2 Afghanistan  2000   2666   20595360\n#> 3 Brazil       1999  37737  172006362\n#> 4 Brazil       2000  80488  174504898\n#> 5 China        1999 212258 1272915272\n#> 6 China        2000 213766 1280428583\n\n\ntable2\n\n\ntable2\n#> # A tibble: 12 × 4\n#>    country      year type            count\n#>    <chr>       <int> <chr>           <int>\n#>  1 Afghanistan  1999 cases             745\n#>  2 Afghanistan  1999 population   19987071\n#>  3 Afghanistan  2000 cases            2666\n#>  4 Afghanistan  2000 population   20595360\n#>  5 Brazil       1999 cases           37737\n#>  6 Brazil       1999 population  172006362\n#>  7 Brazil       2000 cases           80488\n#>  8 Brazil       2000 population  174504898\n#>  9 China        1999 cases          212258\n#> 10 China        1999 population 1272915272\n#> 11 China        2000 cases          213766\n#> 12 China        2000 population 1280428583\n\n\ntable3\n\n\ntable3\n#> # A tibble: 6 × 3\n#>   country      year rate             \n#> * <chr>       <int> <chr>            \n#> 1 Afghanistan  1999 745/19987071     \n#> 2 Afghanistan  2000 2666/20595360    \n#> 3 Brazil       1999 37737/172006362  \n#> 4 Brazil       2000 80488/174504898  \n#> 5 China        1999 212258/1272915272\n#> 6 China        2000 213766/1280428583\n\n\nSpread across two tibbles.\n\n\ntable4a\n#> # A tibble: 3 × 3\n#>   country     `1999` `2000`\n#> * <chr>        <int>  <int>\n#> 1 Afghanistan    745   2666\n#> 2 Brazil       37737  80488\n#> 3 China       212258 213766\n\ntable4b\n#> # A tibble: 3 × 3\n#>   country         `1999`     `2000`\n#> * <chr>            <int>      <int>\n#> 1 Afghanistan   19987071   20595360\n#> 2 Brazil       172006362  174504898\n#> 3 China       1272915272 1280428583\n\n\n\nDefinition 8.1 A dataset is tidy if\n\nEach variable have its own column.\nEach observation have its own row.\nEach value have its oven cell.\n\n\nThese three conditions are interrelated because it is impossible to only satisfy two of the three. In pratical, we need to follow the instructions:\n\nPut each dataset in a tibble.\nPut each variable in a column.\n\nTidy data is a consistent way to organize your data in R. The main advantages are:\n\nIt is one consistent way of storing data. In other words, this is a consistent data structure that can be used in many cases.\nTo placing variables in columns allows R’s vectorized nature to shine.\n\nAll packages in the tidyverse are designed to work with tidy data.\n\n8.2.1 Tidying datasets\nMost datasets are untidy:\n\nOne variable might be spread across multiple columns.\nOne observation might be scattered across multiple rows.\n\n\n8.2.1.1 pivot_longer()\nA common problem is that the column names are not names of variables, but values of a variable. For example, table4a above has columns 1999 and 2000. These two names are actually the values of a variable year. In addition, each row represents two observations, not one.\n\ntable4a\n#> # A tibble: 3 × 3\n#>   country     `1999` `2000`\n#> * <chr>        <int>  <int>\n#> 1 Afghanistan    745   2666\n#> 2 Brazil       37737  80488\n#> 3 China       212258 213766\n\nTo tidy this type of dataset, we need to gather those columns into a new pair of variables. We need three parameters:\n\nThe set of columns that represent values. In this case, those are 1999 and 2000.\nThe name of the variable. In this case, it is year. -The name of the variable whose values are spread over the cells. In this case, it is the number of cases.\n\nThen we apply pivot_longer().\n\npivot_longer(table4a, cols=c(`1999`, `2000`), names_to='year', values_to='cases')\n#> # A tibble: 6 × 3\n#>   country     year   cases\n#>   <chr>       <chr>  <int>\n#> 1 Afghanistan 1999     745\n#> 2 Afghanistan 2000    2666\n#> 3 Brazil      1999   37737\n#> 4 Brazil      2000   80488\n#> 5 China       1999  212258\n#> 6 China       2000  213766\n\nWe may also use the pipe %>% symbol.\n\ntable4a %>% pivot_longer(cols=c(`1999`, `2000`), names_to='year', values_to='cases')\n#> # A tibble: 6 × 3\n#>   country     year   cases\n#>   <chr>       <chr>  <int>\n#> 1 Afghanistan 1999     745\n#> 2 Afghanistan 2000    2666\n#> 3 Brazil      1999   37737\n#> 4 Brazil      2000   80488\n#> 5 China       1999  212258\n#> 6 China       2000  213766\n\nWe can do the similar thing to table4b. Then we could combine the two tibbles together.\n\ntidy4a <- table4a %>% \n    pivot_longer(cols=c(`1999`, `2000`), names_to='year', values_to='cases')\ntidy4b <- table4b %>% \n    pivot_longer(cols=c(`1999`, `2000`), names_to='year', values_to='population')\nleft_join(tidy4a, tidy4b)\n#> Joining, by = c(\"country\", \"year\")\n#> # A tibble: 6 × 4\n#>   country     year   cases population\n#>   <chr>       <chr>  <int>      <int>\n#> 1 Afghanistan 1999     745   19987071\n#> 2 Afghanistan 2000    2666   20595360\n#> 3 Brazil      1999   37737  172006362\n#> 4 Brazil      2000   80488  174504898\n#> 5 China       1999  212258 1272915272\n#> 6 China       2000  213766 1280428583\n\npivot_longer() is an updated approach to gather(), designed to be both simpler to use and to handle more use cases. We recommend you use pivot_longer() for new code; gather() isn’t going away but is no longer under active development.\n\n\n8.2.1.2 pivot_wider()\nAnother issuse is that an observation is scattered across multiple rows. Take table2 as an example. An observation is a country in a year, but each observation is spread across two rows.\n\ntable2\n#> # A tibble: 12 × 4\n#>    country      year type            count\n#>    <chr>       <int> <chr>           <int>\n#>  1 Afghanistan  1999 cases             745\n#>  2 Afghanistan  1999 population   19987071\n#>  3 Afghanistan  2000 cases            2666\n#>  4 Afghanistan  2000 population   20595360\n#>  5 Brazil       1999 cases           37737\n#>  6 Brazil       1999 population  172006362\n#>  7 Brazil       2000 cases           80488\n#>  8 Brazil       2000 population  174504898\n#>  9 China        1999 cases          212258\n#> 10 China        1999 population 1272915272\n#> 11 China        2000 cases          213766\n#> 12 China        2000 population 1280428583\n\nWe could apply pivot_wider() to make it tidy. Here we need two arguments.\n\nThe column that contains variable names. Here, it’s type.\nThe column that contains values forms multiple variables. Here, it’s count.\n\n\npivot_wider(table2, names_from='type', values_from='count')\n#> # A tibble: 6 × 4\n#>   country      year  cases population\n#>   <chr>       <int>  <int>      <int>\n#> 1 Afghanistan  1999    745   19987071\n#> 2 Afghanistan  2000   2666   20595360\n#> 3 Brazil       1999  37737  172006362\n#> 4 Brazil       2000  80488  174504898\n#> 5 China        1999 212258 1272915272\n#> 6 China        2000 213766 1280428583\n\nWe can also use the pipe symbol %>%.\n\ntable2 %>% pivot_wider(names_from='type', values_from='count')\n#> # A tibble: 6 × 4\n#>   country      year  cases population\n#>   <chr>       <int>  <int>      <int>\n#> 1 Afghanistan  1999    745   19987071\n#> 2 Afghanistan  2000   2666   20595360\n#> 3 Brazil       1999  37737  172006362\n#> 4 Brazil       2000  80488  174504898\n#> 5 China        1999 212258 1272915272\n#> 6 China        2000 213766 1280428583\n\npivot_wider() is an updated approach to spread(), designed to be both simpler to use and to handle more use cases. We recommend you use pivot_wider() for new code; spread() isn’t going away but is no longer under active development.\n\n\n8.2.1.3 separate()\nIf we would like to split one columns into multiple columns since there are more than one values in a cell, we could use separate().\n\nseparate(table3, rate, into=c('cases', 'population'))\n#> # A tibble: 6 × 4\n#>   country      year cases  population\n#>   <chr>       <int> <chr>  <chr>     \n#> 1 Afghanistan  1999 745    19987071  \n#> 2 Afghanistan  2000 2666   20595360  \n#> 3 Brazil       1999 37737  172006362 \n#> 4 Brazil       2000 80488  174504898 \n#> 5 China        1999 212258 1272915272\n#> 6 China        2000 213766 1280428583\n\nWe could also use the pipe symbol %>%.\n\ntable3 %>% separate(rate, into=c('cases', 'population'))\n#> # A tibble: 6 × 4\n#>   country      year cases  population\n#>   <chr>       <int> <chr>  <chr>     \n#> 1 Afghanistan  1999 745    19987071  \n#> 2 Afghanistan  2000 2666   20595360  \n#> 3 Brazil       1999 37737  172006362 \n#> 4 Brazil       2000 80488  174504898 \n#> 5 China        1999 212258 1272915272\n#> 6 China        2000 213766 1280428583\n\nUsing separate, the first argument is the column to be separated. into is where you store the parsed data. If no arguments are given, separate() will split values wherever it sees a non-alphanumeric character. If you would like to specify a separator, you may use the sep argument.\n\nIf sep is set to be a character, the column will be separated by the character.\nIf sep is set to be a vector of integers, the column will be separated by the positions.\n\n\nseparate(table3, rate, into=c('cases', 'population'), sep='/')\n#> # A tibble: 6 × 4\n#>   country      year cases  population\n#>   <chr>       <int> <chr>  <chr>     \n#> 1 Afghanistan  1999 745    19987071  \n#> 2 Afghanistan  2000 2666   20595360  \n#> 3 Brazil       1999 37737  172006362 \n#> 4 Brazil       2000 80488  174504898 \n#> 5 China        1999 212258 1272915272\n#> 6 China        2000 213766 1280428583\n\n\nseparate(table3, rate, into=c('cases', 'population'), sep=c(2,5))\n#> # A tibble: 6 × 4\n#>   country      year cases population\n#>   <chr>       <int> <chr> <chr>     \n#> 1 Afghanistan  1999 74    5/1       \n#> 2 Afghanistan  2000 26    66/       \n#> 3 Brazil       1999 37    737       \n#> 4 Brazil       2000 80    488       \n#> 5 China        1999 21    225       \n#> 6 China        2000 21    376\n\nNote that in this example, since into only has two columns, the rest of the data are lost.\nAnother useful argument is convert. After separation, the columns are still character columns. If we set convert=TRUE, the columns will be automatically converted into better types if possible.\n\nseparate(table3, rate, into=c('cases', 'population'), convert=TRUE)\n#> # A tibble: 6 × 4\n#>   country      year  cases population\n#>   <chr>       <int>  <int>      <int>\n#> 1 Afghanistan  1999    745   19987071\n#> 2 Afghanistan  2000   2666   20595360\n#> 3 Brazil       1999  37737  172006362\n#> 4 Brazil       2000  80488  174504898\n#> 5 China        1999 212258 1272915272\n#> 6 China        2000 213766 1280428583\n\n\n\n8.2.1.4 unite()\nunite() is the inverse of separate(). The syntax is straghtforward. The default separator is _.\n\ntable3 %>% unite(new, year, rate, sep='_')\n#> # A tibble: 6 × 2\n#>   country     new                   \n#>   <chr>       <chr>                 \n#> 1 Afghanistan 1999_745/19987071     \n#> 2 Afghanistan 2000_2666/20595360    \n#> 3 Brazil      1999_37737/172006362  \n#> 4 Brazil      2000_80488/174504898  \n#> 5 China       1999_212258/1272915272\n#> 6 China       2000_213766/1280428583"
  },
  {
    "objectID": "contents/8/08-.html#dplyr",
    "href": "contents/8/08-.html#dplyr",
    "title": "8  R for Data Sciences",
    "section": "8.3 dplyr",
    "text": "8.3 dplyr\ndplyr is a package used to manipulate data. Here we will just introduce the most basic functions. We will use nycflights13::flights as the example. This dataset comes from the US Bureau of Transportation Statistics. The document can be found here.\nTo load the dataset, please use the following code.\n\n\n\n\nlibrary(nycflights13)\nflights\n#> # A tibble: 336,776 × 19\n#>     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>    <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n#>  1  2013     1     1      517            515         2      830            819\n#>  2  2013     1     1      533            529         4      850            830\n#>  3  2013     1     1      542            540         2      923            850\n#>  4  2013     1     1      544            545        -1     1004           1022\n#>  5  2013     1     1      554            600        -6      812            837\n#>  6  2013     1     1      554            558        -4      740            728\n#>  7  2013     1     1      555            600        -5      913            854\n#>  8  2013     1     1      557            600        -3      709            723\n#>  9  2013     1     1      557            600        -3      838            846\n#> 10  2013     1     1      558            600        -2      753            745\n#> # … with 336,766 more rows, and 11 more variables: arr_delay <dbl>,\n#> #   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n\n\n8.3.1 filter()\nfilter() allows you to subset observations based on their values. The first argument is the name of the tibble. The rest are the expressions that filter the data. Please see the following examples.\n\nflights %>% filter(month==1, day==1)\n#> # A tibble: 842 × 19\n#>     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>    <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n#>  1  2013     1     1      517            515         2      830            819\n#>  2  2013     1     1      533            529         4      850            830\n#>  3  2013     1     1      542            540         2      923            850\n#>  4  2013     1     1      544            545        -1     1004           1022\n#>  5  2013     1     1      554            600        -6      812            837\n#>  6  2013     1     1      554            558        -4      740            728\n#>  7  2013     1     1      555            600        -5      913            854\n#>  8  2013     1     1      557            600        -3      709            723\n#>  9  2013     1     1      557            600        -3      838            846\n#> 10  2013     1     1      558            600        -2      753            745\n#> # … with 832 more rows, and 11 more variables: arr_delay <dbl>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>,\n#> #   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n\n\n\n8.3.2 select()\nselect() allows you to filter columns. It is very similar to slicing [].\n\n\n8.3.3 mutate()\nmutate() is used to add new columns that are functions of existing columns.\n\nflights %>% mutate(gain=arr_delay-dep_delay, hours=air_time/60, gain_per_hour=gain/hours)\n#> # A tibble: 336,776 × 22\n#>     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>    <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n#>  1  2013     1     1      517            515         2      830            819\n#>  2  2013     1     1      533            529         4      850            830\n#>  3  2013     1     1      542            540         2      923            850\n#>  4  2013     1     1      544            545        -1     1004           1022\n#>  5  2013     1     1      554            600        -6      812            837\n#>  6  2013     1     1      554            558        -4      740            728\n#>  7  2013     1     1      555            600        -5      913            854\n#>  8  2013     1     1      557            600        -3      709            723\n#>  9  2013     1     1      557            600        -3      838            846\n#> 10  2013     1     1      558            600        -2      753            745\n#> # … with 336,766 more rows, and 14 more variables: arr_delay <dbl>,\n#> #   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>,\n#> #   gain <dbl>, hours <dbl>, gain_per_hour <dbl>\n\nIf you only want to see the new columns, transmute() can be used.\n\nflights %>% transmute(gain=arr_delay-dep_delay, hours=air_time/60, gain_per_hour=gain/hours)\n#> # A tibble: 336,776 × 3\n#>     gain hours gain_per_hour\n#>    <dbl> <dbl>         <dbl>\n#>  1     9 3.78           2.38\n#>  2    16 3.78           4.23\n#>  3    31 2.67          11.6 \n#>  4   -17 3.05          -5.57\n#>  5   -19 1.93          -9.83\n#>  6    16 2.5            6.4 \n#>  7    24 2.63           9.11\n#>  8   -11 0.883        -12.5 \n#>  9    -5 2.33          -2.14\n#> 10    10 2.3            4.35\n#> # … with 336,766 more rows\n\nHere are an (incomplete) list of supported operators and functions.\n\nArithmetic operators: +, -, *, /, ^.\nModular arithmetic: %/% (integer division), %% (remainder).\nLogs: log(), log2(), log10().\nCumulative and rolling aggregates: cumsum(), cumprod(), cummin(), cummax(), cummean()\nLogical comparisons: <, <=, >, >=, !=.\n\n\n\n8.3.4 summarize() and group_by()\nsummarize() collapses a dataset to a single row. It computes values across all rows. It is usually paired with group_by(). Here are some examples.\n\nExample 8.3  \n\nflights %>% group_by(year, month, day) %>% \n    summarize(delay=mean(dep_delay, na.rm=TRUE))\n#> `summarise()` has grouped output by 'year', 'month'. You can override using the\n#> `.groups` argument.\n#> # A tibble: 365 × 4\n#> # Groups:   year, month [12]\n#>     year month   day delay\n#>    <int> <int> <int> <dbl>\n#>  1  2013     1     1 11.5 \n#>  2  2013     1     2 13.9 \n#>  3  2013     1     3 11.0 \n#>  4  2013     1     4  8.95\n#>  5  2013     1     5  5.73\n#>  6  2013     1     6  7.15\n#>  7  2013     1     7  5.42\n#>  8  2013     1     8  2.55\n#>  9  2013     1     9  2.28\n#> 10  2013     1    10  2.84\n#> # … with 355 more rows\n\n\n\nExample 8.4  \n\ndelays <- flights %>% \n    group_by(dest) %>% \n    summarize(\n        count=n(), \n        dist=mean(distance, na.rm=TRUE),\n        delay=mean(arr_delay, na.rm=TRUE)\n    ) %>% \n    filter(count>20, dest!='HNL')\ndelays\n#> # A tibble: 96 × 4\n#>    dest  count  dist delay\n#>    <chr> <int> <dbl> <dbl>\n#>  1 ABQ     254 1826   4.38\n#>  2 ACK     265  199   4.85\n#>  3 ALB     439  143  14.4 \n#>  4 ATL   17215  757. 11.3 \n#>  5 AUS    2439 1514.  6.02\n#>  6 AVL     275  584.  8.00\n#>  7 BDL     443  116   7.05\n#>  8 BGR     375  378   8.03\n#>  9 BHM     297  866. 16.9 \n#> 10 BNA    6333  758. 11.8 \n#> # … with 86 more rows\n\n\ngroup_by() can also be used together with mutate() and filter().\n\nExample 8.5  \n\nflights %>%\n    group_by(dest) %>%\n    filter(n() > 365) %>%\n    filter(arr_delay > 0) %>%\n    mutate(prop_delay = arr_delay / sum(arr_delay)) %>%\n    select(year:day, dest, arr_delay, prop_delay)\n#> # A tibble: 131,106 × 6\n#> # Groups:   dest [77]\n#>     year month   day dest  arr_delay prop_delay\n#>    <int> <int> <int> <chr>     <dbl>      <dbl>\n#>  1  2013     1     1 IAH          11  0.000111 \n#>  2  2013     1     1 IAH          20  0.000201 \n#>  3  2013     1     1 MIA          33  0.000235 \n#>  4  2013     1     1 ORD          12  0.0000424\n#>  5  2013     1     1 FLL          19  0.0000938\n#>  6  2013     1     1 ORD           8  0.0000283\n#>  7  2013     1     1 LAX           7  0.0000344\n#>  8  2013     1     1 DFW          31  0.000282 \n#>  9  2013     1     1 ATL          12  0.0000400\n#> 10  2013     1     1 DTW          16  0.000116 \n#> # … with 131,096 more rows\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe already use it in the above examples. This is to compute the number of observations in the current group. This function is implemented specifically for each data source and can only be used from within summarise(), mutate() and filter()."
  },
  {
    "objectID": "contents/8/08-.html#ggplot2",
    "href": "contents/8/08-.html#ggplot2",
    "title": "8  R for Data Sciences",
    "section": "8.4 ggplot2",
    "text": "8.4 ggplot2"
  },
  {
    "objectID": "contents/8/08-.html#exercises",
    "href": "contents/8/08-.html#exercises",
    "title": "8  R for Data Sciences",
    "section": "8.5 Exercises",
    "text": "8.5 Exercises\n\nExercise 8.1 How can you tell if an object is a tibble?\n\n\nExercise 8.2 Compare and contrast the following operations on a data.frame and equivalent tibble. What is different? Why might the default data frame behaviors cause you frustration?\n\ndf <- data.frame(abc = 1, xyz = \"a\")\ndf$x\ndf[, \"xyz\"]\ndf[, c(\"abc\", \"xyz\")]\n\n\n\nExercise 8.3 If you have the name of a variable stored in an object, e.g., var <- \"xyz\", how can you extract the reference variable from a tibble? You may use the following codes to get a tibble.\n\ntbl <- tibble(abc = 1, xyz = \"a\")\n\n\n\nExercise 8.4 Practice referring to nonsyntactic names in the following data.frame by:\n\nExtracting the variable called 1.\nCreating a new column called 3, which is 2 divided by 1.\nRenaming the columns to one, two, and three:\n\n\nannoying <- tibble(\n`1` = 1:10,\n`2` = `1` * 2 + rnorm(length(`1`))\n)\n\n\n\nExercise 8.5 Both unite() and separate() have a remove argument. What does it do? Why would you set it to FALSE?\n\n\nExercise 8.6 Use flights dataset. Currently dep_time and sched_dep_time are convenient to look at, but hard to compute with because they’re not really continuous numbers. Convert them to a more convenient representation of number of minutes since midnight."
  },
  {
    "objectID": "contents/8/08-.html#projects",
    "href": "contents/8/08-.html#projects",
    "title": "8  R for Data Sciences",
    "section": "8.6 Projects",
    "text": "8.6 Projects\n\n\n\n\n\n\n\n\nExercise 8.7 Please make the following data tidy.\n\nlibrary(tidyverse)\ndf <- tibble(Day=1:5, `Plant_A_Height (cm)`=c(0.5, 0.7, 0.9, 1.3, 1.8), `Plant_B_Height (cm)`=c(0.7, 1, 1.5, 1.8, 2.2))\n\n\n\nExercise 8.8 Please use the flights dataset. Please find all flights that :\n\nHad an arrival delay of two or more hours.\nFlew to IAH or HOU.\nWere operated by United, American or Delta.\nDeparted in summer (July, August, and September).\nArrived more than two hours late, but didn’t leave late.\nWere delayed by at least an hour, but made up over 30 minutes in flight.\nDeparted between midnight and 6 a.m. (inclusive).\n\n\n\n\n\n\n[1] Wickham, H. and Grolemund, G. (2017). R for data science: Import, tidy, transform, visualize, and model data. O’Reilly Media."
  },
  {
    "objectID": "contents/2/02-.html#sec-path",
    "href": "contents/2/02-.html#sec-path",
    "title": "2  Python Basics",
    "section": "2.1 Built-in Types: numeric types and str",
    "text": "2.1 Built-in Types: numeric types and str\nThis section is based on [1].\nThere are several built-in data structures in Python. Here is an (incomplete) list:\n\nNone\nBoolean – True, False\nNumeric Types — int, float, complex\nText Sequence Type — str\nSequence Types — list\nMap type - dict\n\nWe will cover numeric types and strings in this section. The rests are either simple that are self-explained, or not simple that will be discussed later.\n\n2.1.1 Numeric types and math expressions\nNumeric types are represented by numbers. If there are no confusions, Python will automatically detect the type.\n\nx = 1 # x is an int.\ny = 2.0 # y is a float.\n\nPython can do math just like other programming languages. The basic math operations are listed as follows.\n\n+, -, *, /, >, <, >=, <= works as normal.\n** is the power operation.\n% is the mod operation.\n!= is not equal\n\n\n\n2.1.2 str\nScalars are represented by numbers and strings are represented by quotes. Example:\n\nx = 1       # x is a scalar.\ny = 's'     # y is a string with one letter.\nz = '0'     # z loos like a number, but it is a string.\nw = \"Hello\" # w is a string with double quotes.\n\nHere are some facts.\n\nFor strings, you can use either single quotes ' or double quotes \".\n\\ is used to denote escaped words. You may find the list Here.\nThere are several types of scalars, like int, float, etc.. Usually Python will automatically determine the type of the data, but sometimes you may still want to declare them manually.\nYou can use int(), str(), etc. to change types.\n\nAlthough str is a built-in type, there are tons of tricks with str, and there are tons of packages related to strings. Generally speaking, to play with strings, we are interested in two types of questions.\n\nPut information together to form a string.\nExtract information from a string. We briefly talk about these two tasks.\n\n\n\n\n\n\n\nNote\n\n\n\nThere is a very subtle relations between the variable / constant and the name of the variable / constant. We will talk about these later.\n\n\n\nExample 2.1 Here is an example of playing with strings. Please play with these codes and try to understand what they do.\n\nimport re\n\ndef clean_strings(strings):\n    result = []\n    for value in strings:\n        value = value.strip()\n        value = re.sub('[!#?]', '', value)\n        value = value.title()\n        result.append(value)\n    return result\n\nstates = [' Alabama ', 'Georgia!', 'Georgia', 'georgia', 'FlOrIda',\n          'south carolina##', 'West virginia?']\nprint(clean_strings(states))\n\n['Alabama', 'Georgia', 'Georgia', 'Georgia', 'Florida', 'South Carolina', 'West Virginia']"
  },
  {
    "objectID": "contents/2/02-.html#fundamentals",
    "href": "contents/2/02-.html#fundamentals",
    "title": "2  Python Basics",
    "section": "2.2 Fundamentals",
    "text": "2.2 Fundamentals\nThis section is mainly based on [2].\n\n2.2.1 Indentation\nOne key feature about Python is that its structures (blocks) is determined by Indentation.\nLet’s compare with other languages. Let’s take C as an example.\n\n/*This is a C function.*/\nint f(int x){return x;}\n\nThe block is defined by {} and lines are separated by ;. space and newline are not important when C runs the code. It is recommended to write codes in a “beautiful, stylish” format for readibility, as follows. However it is not mandatary.\n\n/*This is a C function.*/\nint f(int x) {\n   return x;\n}\n\nIn Python, blocks starts from : and then are determined by indents. Therefore you won’t see a lot of {} in Python, and the “beautiful, stylish” format is mandatary.\n\n# This is a Python function.\ndef f(x):\n    return x\n\nThe default value for indentation is 4 spaces, which can be changed by users. We will just use the default value in this course.\n\n\n\n\n\n\nNote\n\n\n\nIt is usually recommended that one line of code should not be very long. If you do have one, and it cannot be shortened, you may break it into multiline codes directly in Python. However, since indentation is super important in Python, when break one line code into multilines, please make sure that everything is aligned perfectly. Please see the following example.\n\nresults = shotchartdetail.ShotChartDetail(\n            team_id = 0,\n            player_id = 201939,\n            context_measure_simple = 'FGA',\n            season_nullable = '2021-22',\n            season_type_all_star = 'Regular Season')\n\n\n\n\n\n2.2.2 Binary operators and comparisons\nMost binary operators behaves as you expected. Here I just want to mention == and is.\n\n== is testing whehter these two objects have the same value.\nis is testing whether these two objects are exactly the same.\n\n\n\n\n\n\n\nNote\n\n\n\nYou may use id(x) to check the id of the object x. Two objects are identical if they have the same id.\n\n\n\n\n\n2.2.3 import\nIn Python a module is simply a file with the .py extension containing Python code. Assume that we have a Python file example.py stored in the folder assests/codes/. The file is as follows.\n\n# from assests/codes/example.py\n\ndef f(x):\n    print(x)\n\nA = 'You get me!'\n\nYou may get access to this function and this string in the following way.\n\nfrom assests.codes import example\n\nexample.f(example.A)\n\nYou get me!\n\n\n\n\n2.2.4 Comments\nAny text preceded by the hash mark (pound sign) # is ignored by the Python interpreter. In many IDEs you may use hotkeys to directly toggle multilines as comments. For example, in VS Code the default setting for toggling comments is ctrl+/.\n\n\n2.2.5 Dynamic references, strong types\nIn some programming languages, you have to declare the variable’s name and what type of data it will hold. If a variable is declared to be a number, it can never hold a different type of value, like a string. This is called static typing because the type of the variable can never change.\nPython is a dynamically typed language, which means you do not have to declare a variable or what kind of data the variable will hold. You can change the value and type of data at any time. This could be either great or terrible news.\nOn the other side, “dynamic typed” doesn’t mean that types are not important in Python. You still have to make sure that the types of all variables meet the requirements of the operations used.\n\na = 1\nb = 2\nb = '2'\nc = a + b\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n\nIn this example, b was first assigned by a number, and then it was reassigned by a str. This is totally fine since Python is dynamically types. However later when adding a and b, the type error occurs since you cannot add a number and a str.\n\n\n\n\n\n\nNote\n\n\n\nYou may always use type(x) to detect the type of the object x.\n\n\n\n\n2.2.6 Everything is an object\nEvery number, string, data structure, function, class, module, and so on exists in the Python interpreter in its own “box”, which is referred to as a Python object.\nEach object has an associated type (e.g., string or function) and internal data. In practice this makes the language very flexible, as even functions can be treated like any other object.\nEach object might have attributes and/or methods attached.\n\n\n2.2.7 Mutable and immutable objects\nAn object whose internal state can be changed is mutable. On the other hand, immutable doesn’t allow any change in the object once it has been created.\nSome objects of built-in type that are mutable are:\n\nLists\nDictionaries\nSets\n\nSome objects of built-in type that are immutable are:\n\nNumbers (Integer, Rational, Float, Decimal, Complex & Booleans)\nStrings\nTuples\n\n\nExample 2.2 (Tuples are not really “immutable”) You can treat a tuple as a container, which contains some objects. The relations between the container and its contents are immutable, but the objects it holds might be mutable. Please check the following example.\n\ncontainer = ([1], [2])\nprint('This is `container`: ', container)\nprint('This is the id of `container`: ', id(container))\nprint('This is the id of the first list of `container`: ', id(container[0]))\n\ncontainer[0].append(2)\nprint('This is the new `container`: ', container)\nprint('This is the id of the new `container`: ', id(container))\nprint('This is the id of the first list (which is updated) of the new `container`: ', id(container[0]))\n\nThis is `container`:  ([1], [2])\nThis is the id of `container`:  1946833634880\nThis is the id of the first list of `container`:  1946833486272\nThis is the new `container`:  ([1, 2], [2])\nThis is the id of the new `container`:  1946833634880\nThis is the id of the first list (which is updated) of the new `container`:  1946833486272\n\n\nYou can see that the tuple container and its first object stay the same, although we add one element to the first object."
  },
  {
    "objectID": "contents/2/02-.html#flows-and-logic",
    "href": "contents/2/02-.html#flows-and-logic",
    "title": "2  Python Basics",
    "section": "2.3 Flows and Logic",
    "text": "2.3 Flows and Logic\n\n2.3.1 for loop\n\nrange(10)\nlist\n\n\n\n2.3.2 if conditional control"
  },
  {
    "objectID": "contents/2/02-.html#list",
    "href": "contents/2/02-.html#list",
    "title": "2  Python Basics",
    "section": "2.4 list",
    "text": "2.4 list\n\n\n\n\n\n\nNote\n\n\n\nIn Python, a list is an ordered sequence of object types and a string is an ordered sequence of characters.\n\n\n\nAccess to the data\nSlicing\nMethods\n\nappend and +\nextend\npop\nremove\n\nin\nfor\nlist()\nsorted\nstr.split\nstr.join\n\n\n2.4.1 List Comprehension\nList Comprehension is a convenient way to create lists based on the values of an existing list. It cannot provide any real improvement to the performance of the codes, but it can make the codes shorter and easier to read.\nThe format of list Comprehension is\nnewlist = [expression for item in iterable if condition == True]"
  },
  {
    "objectID": "contents/2/02-.html#dict",
    "href": "contents/2/02-.html#dict",
    "title": "2  Python Basics",
    "section": "2.5 dict",
    "text": "2.5 dict\n\nAccess to the data\nMethods\n\ndirectly add items\nupdate\nget\nkeys\nvalues\nitems\n\ndict()\ndictionary comprehension"
  },
  {
    "objectID": "contents/2/02-.html#exercises",
    "href": "contents/2/02-.html#exercises",
    "title": "2  Python Basics",
    "section": "2.6 Exercises",
    "text": "2.6 Exercises\nMost problems are based on [3], [1] and [4].\n\nExercise 2.1 (Indentation) Please tell the differences between the following codes. If you don’t understand for don’t worry about it. Just focus on the indentation and try to understand how the codes work.\n\nfor i in range(5):\n    print('Hello world!')\nprint('Hello world!')\n\n\nfor i in range(5):\n    print('Hello world!')\n    print('Hello world!')\n\n\nfor i in range(5):\nprint('Hello world!')\nprint('Hello world!')\n\n\nfor i in range(5):\n    pass\nprint('Hello world!')\nprint('Hello world!')\n\n\n\nExercise 2.2 (Play with built-in data types) Please first guess the results of all expressions below, and then run them to check your answers.\n\nprint(True and True)\nprint(True or True)\nprint(False and True)\nprint((1+1>2) or (1-1<1))\n\n\n\nExercise 2.3 (== vs is) Please explain what happens below.\n\na = 1\nb = 1.0\nprint(type(a))\nprint(type(b))\n\nprint(a == b)\nprint(a is b)\n\n<class 'int'>\n<class 'float'>\nTrue\nFalse\n\n\n\n\nExercise 2.4 (Play with strings) Please excute the code below line by line and explain what happens in text cells.\n\n# 1\nanswer = 10\nwronganswer = 11\ntext1 = \"The answer to this question is {}. If you got {}, you are wrong.\".format(answer, wronganswer)\nprint(text1)\n\n# 2\nvar = True\ntext2 = \"This is {}.\".format(var)\nprint(text2)\n\n# 3\nword1 = 'Good '\nword2 = 'buy. '\ntext3 = (word1 + word2) * 3\nprint(text3)\n\n# 4\nsentence = \"This is\\ngood enough\\nfor a exercise to\\nhave so many parts. \" \\\n           \"We would also want to try this symbol: '. \" \\\n           \"Do you know how to type \\\" in double quotes?\"\nprint(sentence)\n\nThe answer to this question is 10. If you got 11, you are wrong.\nThis is True.\nGood buy. Good buy. Good buy. \nThis is\ngood enough\nfor a exercise to\nhave so many parts. We would also want to try this symbol: '. Do you know how to type \" in double quotes?\n\n\n\n\nExercise 2.5 (split and join) Please excute the code below line by line and explain what happens in text cells.\n\nsentence = 'This is an example of a sentence that I expect you to split.'\n\nwordlist = sentence.split(' ')\n\nnewsentence = '\\n'.join(wordlist)\nprint(newsentence)\n\n\n\nExercise 2.6 (List reference) Please finish the following tasks.\n\nGiven the list a, make a new reference b to a. Update the first entry in b to be 0. What happened to the first entry in a? Explain your answer in a text block.\nGiven the list a, make a new copy b of the list a using the function list. Update the first entry in b to be 0. What happened to the first entry in a? Explain your answer in a text block.\n\n\n\nExercise 2.7 (List comprehension) Given a list of numbers, use list comprehension to remove all odd numbers from the list:\n\nnumbers = [3,5,45,97,32,22,10,19,39,43]\n\n\n\nExercise 2.8 (More list comprehension) Use list comprehension to find all of the numbers from 1-1000 that are divisible by 7.\n\n\nExercise 2.9 (More list comprehension) Count the number of spaces in a string.\n\n\nExercise 2.10 (More list comprehension) Use list comprehension to get the index and the value as a tuple for items in the list ['hi', 4, 8.99, 'apple', ('t,b', 'n')]. Result would look like [(index, value), (index, value), ...].\n\n\nExercise 2.11 (More list comprehension) Use list comprehension to find the common numbers in two lists (without using a tuple or set) list_a = [1, 2, 3, 4], list_b = [2, 3, 4, 5].\n\n\nExercise 2.12 (Probability) Compute the probability that two people out of 23 share the same birthday. The math formula for this is \\[1-\\frac{365!/(365-23)!}{365^{23}}=1-\\frac{365}{365}\\cdot\\frac{365-1}{365}\\cdot\\frac{365-2}{365}\\cdot\\ldots\\cdot\\frac{365-22}{365}.\\]\n\nTo directly use the formula we have to use a high performance math package, e.g. math. Please use math.factorial to compute the above formula.\nPlease use the right hand side of the above formula to compute the probability using the following steps.\n\nPlease use the list comprehension to create a list \\(\\left[\\frac{365}{365},\\frac{365-1}{365},\\frac{365-2}{365},\\ldots,\\frac{365-22}{365}\\right]\\).\nUse numpy.prod to compute the product of elements of the above list.\nCompute the probability by finishing the formula.\n\nPlease use time to test which method mentioned above is faster."
  },
  {
    "objectID": "contents/2/02-.html#projects",
    "href": "contents/2/02-.html#projects",
    "title": "2  Python Basics",
    "section": "2.7 Projects",
    "text": "2.7 Projects\nMost projects are based on [2], [5].\n\nExercise 2.13 (Determine the indefinite article) Please finish the following tasks.\n\nPlease construct a list aeiou that contains all vowels.\nGiven a word word, we would like to find the indefinite article article before word. (Hint: the article should be an if the first character of word is a vowel, and a if not.)\n\n\n\n\nClick for Hint.\n\n\nSolution. Consider in, .lower() and if structure.\n\n\n\nExercise 2.14 (Datetime and files names) We would like to write a program to quickly generate N files. Every time we run the code, N files will be generated. We hope to store all files generated and organize them in a neat way. To achieve this, one way is to create a subfolder for each run and store all files generated during that run in the particular subfolder. Since we would like to make it fast, the real point of this task is to find a way to automatically generate the file names for the files generated and the folder names for the subfolders generated. You don’t need to worry about the contents of the files and empty files are totally fine for this problem.\n\n\n\nClick for Hint.\n\n\nSolution. One way to automatically generate file names and folder names is to use the date and the time when the code is run. Please check datetime package for getting and formatting date/time, and os packages for playing with files and folders.\n\n\n\nExercise 2.15 (Color the Gnomic data) We can use ASCII color codes in the string to change the color of strings, as an example \\033[91m for red and \\033[94m for blue. See the following example.\n\nprint('\\033[91m'+'red'+'\\033[92m'+'green'+'\\033[94m'+'blue'+'\\033[93m'+'yellow')\n\nConsider an (incomplete) Gnomic data given below which is represented by a long sequence of A, C, T and G. Please color it using ASCII color codes.\n\nGnomicdata = 'TCGATCTCTTGTAGATCTGTTCTCTAAACGAACTTTAAAATCTGTGTGGCTGTCACTCGG'\\\n             'CTGCATGCTTAGTGCACTCACGCAGTATAATTAATAACTAATTACTGTCGTTGACAGGAC'\\\n             'ACGAGTAACTCGTCTATCTTCTGCAGGCTGCTTACGGTTTCGTCCGTGTTGCAGCCGATC'\\\n             'ATCAGCACATCTAGGTTTTGTCCGGGTGTGACCGAAAGGTAAGATGGAGAGCCTTGTCCC'\\\n             'TGGTTTCAACGAGAAAACACACGTCCAACTCAGTTTGCCTGTTTTACAGGTTCGCGACGT'\\\n             'GCTCGTACGTGGCTTTGGAGACTCCGTGGAGGAGGTCTTATCAGAGGCACGTCAACATCT'\\\n             'TAAAGATGGCACTTGTGGCTTAGTAGAAGTTGAAAAAGGCGTTTTGCCTCAACTTGAACA'\\\n             'GCCCTATGTGTTCATCAAACGTTCGGATGCTCGAACTGCACCTCATGGTCATGTTATGGT'\\\n             'TGAGCTGGTAGCAGAACTCGAAGGCATTCAGTACGGTCGTAGTGGTGAGACACTTGGTGT'\\\n             'CCTTGTCCCTCATGTGGGCGAAATACCAGTGGCTTACCGCAAGGTTCTTCTTCGTAAGAA'\\\n             'CGGTAATAAAGGAGCTGGTGGCCATAGTTACGGCGCCGATCTAAAGTCATTTGACTTAGG'\\\n             'CGACGAGCTTGGCACTGATCCTTATGAAGATTTTCAAGAAAACTGGAACACTAAACATAG'\n\n\n\n\nClick for Hint.\n\n\nSolution (Hint). You may use if to do the conversion. Or you may use dict to do the conversion.\n\n\n\nExercise 2.16 (sorted) Please read through the Key funtions in this article, and sort the following two lists.\n\nSort list1 = [[11,2,3], [2, 3, 1], [5,-1, 2], [2, 3,-8]] according to the sum of each list.\nSort list2 = [{'a': 1, 'b': 2}, {'a': 3, 'b': 4},{'a': 5, 'b': 2}] according to the b value of each dictionary.\n\n\n\nExercise 2.17 (Fantasy Game Inventory) You are creating a fantasy video game. The data structure to model the player’s inventory will be a dictionary where the keys are string values describing the item in the inventory and the value is an integer value detailing how many of that item the player has. For example, the dictionary value {'rope': 1, 'torch': 6, 'gold coin': 42, 'dagger': 1, 'arrow': 12} means the player has 1 rope, 6 torches, 42 gold coins, and so on.\nWrite a program to take any possible inventory and display it like the following:\n\nInventory:\n12 arrow\n42 gold coin\n1 rope\n6 torch\n1 dagger\nTotal number of items: 62\n\n\n\n\n\n\n[1] Youens-Clark, K. (2020). Tiny python projects. Manning Publications.\n\n\n[2] McKinney, W. (2017). Python for data analysis: Data wrangling with pandas, NumPy, and IPython. O’Reilly Media.\n\n\n[3] Shaw, Z. A. (2017). Learn python 3 the hard way. Addison Wesley.\n\n\n[4] Sweigart, A. (2020). Automate the boring stuff with python, 2nd edition practical programming for total beginners: Practical programming for total beginners. No Starch Press.\n\n\n[5] Klosterman, S. (2021). Data science projects with python: A case study approach to gaining valuable insights from real data with machine learning. Packt Publishing, Limited."
  },
  {
    "objectID": "contents/8/08-.html#an-example",
    "href": "contents/8/08-.html#an-example",
    "title": "8  R for Data Sciences",
    "section": "8.4 An Example",
    "text": "8.4 An Example\nLet us explore the tuberculosis cases data. The dataset is provided by WHO and can be downloaded from here. tidyr also provides the dataset. You may directly get the dataset after you load tidyr from tidyverse. The variable description can be found from tidyr documentations.\n\nlibrary(tidyverse)\nwho\n#> # A tibble: 7,240 × 60\n#>    country  iso2  iso3   year new_sp_m014 new_sp_m1524 new_sp_m2534 new_sp_m3544\n#>    <chr>    <chr> <chr> <int>       <int>        <int>        <int>        <int>\n#>  1 Afghani… AF    AFG    1980          NA           NA           NA           NA\n#>  2 Afghani… AF    AFG    1981          NA           NA           NA           NA\n#>  3 Afghani… AF    AFG    1982          NA           NA           NA           NA\n#>  4 Afghani… AF    AFG    1983          NA           NA           NA           NA\n#>  5 Afghani… AF    AFG    1984          NA           NA           NA           NA\n#>  6 Afghani… AF    AFG    1985          NA           NA           NA           NA\n#>  7 Afghani… AF    AFG    1986          NA           NA           NA           NA\n#>  8 Afghani… AF    AFG    1987          NA           NA           NA           NA\n#>  9 Afghani… AF    AFG    1988          NA           NA           NA           NA\n#> 10 Afghani… AF    AFG    1989          NA           NA           NA           NA\n#> # … with 7,230 more rows, and 52 more variables: new_sp_m4554 <int>,\n#> #   new_sp_m5564 <int>, new_sp_m65 <int>, new_sp_f014 <int>,\n#> #   new_sp_f1524 <int>, new_sp_f2534 <int>, new_sp_f3544 <int>,\n#> #   new_sp_f4554 <int>, new_sp_f5564 <int>, new_sp_f65 <int>,\n#> #   new_sn_m014 <int>, new_sn_m1524 <int>, new_sn_m2534 <int>,\n#> #   new_sn_m3544 <int>, new_sn_m4554 <int>, new_sn_m5564 <int>,\n#> #   new_sn_m65 <int>, new_sn_f014 <int>, new_sn_f1524 <int>, …\n\nBased on the description of varaibles, we understand that\n\ncountry, iso2, iso3 are all refered to country names (and thus they are redundant).\nColumns after year, like new_sp_m014 etc., are counts of new TB cases recorded by groups. The code has three parts, most of which are separated by _ (but there are some exceptions).\n\nThe first part is always new.\nThe second part is a code for method of diagnosis:\n\nrel = relapse,\nsn = negative pulmonary smear,\nsp = positive pulmonary smear,\nep = extrapulmonary.\n\nThe third part is a code for gender (f = female, m = male) and a code for age group:\n\n014 = 0-14 yrs of age,\n1524 = 15-24 years of age,\n2534 = 25 to 34 years of age,\n3544 = 35 to 44 years of age,\n4554 = 45 to 54 years of age,\n5564 = 55 to 64 years of age,\n65 = 65 years of age or older\n\n\n\nTherefore to clean the data, we need the following steps.\n\nExample 8.6 Gather together all the columns from new_sp_m014 to newrel_f65.\n\n\n\n\n\n\nTip\n\n\n\n\n\n\nwholonger <- who %>% pivot_longer(cols=5:60, names_to='group', values_to='counts')\n\n\n\n\n\nThen we use stringr::str_replace() to replace newrel by new_rel.\n\nwholonger2 <- wholonger %>% mutate(key=str_replace(group, 'newrel', 'new_rel'))\n\n\nExample 8.7 Parse the column group into columns.\n\n\n\n\n\n\nTip\n\n\n\n\n\n\nwholonger3 <- wholonger2 %>% \n        separate(key, into=c('new', 'type', 'genderage'), sep='_') %>% \n        separate(genderage, into=c('gender', 'age'), sep=1)\n\n\n\n\n\n\nExample 8.8 Pick the columns that matters.\n\n\n\n\n\n\nTip\n\n\n\n\n\n\ntidywho <- wholonger3[c('country', 'year', 'type', 'gender', 'age', 'counts')]\n\n\n\n\n\nWe could use the pipe symbol to connect all the above steps.\n\n\n\n\n\n\nTip\n\n\n\n\n\n\ntidywho <- who %>% \n    pivot_longer(cols=5:60, names_to='group', values_to='counts') %>% \n    mutate(key=str_replace(group, 'newrel', 'new_rel')) %>% \n    separate(key, into=c('new', 'type', 'genderage'), sep='_') %>% \n    separate(genderage, into=c('gender', 'age'), sep=1) %>% \n    select('country', 'year', 'type', 'gender', 'age', 'counts')"
  }
]