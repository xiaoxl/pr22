[
  {
    "objectID": "contents/8/08-.html#tibble",
    "href": "contents/8/08-.html#tibble",
    "title": "8  R for Data Sciences",
    "section": "8.1 tibble",
    "text": "8.1 tibble\ntidyverse mainly deals with tibble instead of data.frame. Therefore this is where we start.\ntibble is a data.frame with different attributes and requirements. The package tibble provides support for tibble. It is included in tidyverse. To load it, you just use the code:\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.7     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\n\n8.1.1 Create tibbles\nHere is an example of creating tibbles.\n\nExample 8.1  \n\ntbl <- tibble(x=1:5, y=1, z=x^2+y)\ntbl\n\n# A tibble: 5 × 3\n      x     y     z\n  <int> <dbl> <dbl>\n1     1     1     2\n2     2     1     5\n3     3     1    10\n4     4     1    17\n5     5     1    26\n\nattributes(tbl)\n\n$class\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n$row.names\n[1] 1 2 3 4 5\n\n$names\n[1] \"x\" \"y\" \"z\"\n\n\nNote that it is more flexible to create a tibble since tibble() will automatically recycle inputs and allows you to refer to variables that you just created.\n\n\n\n\n\n\n\nNote\n\n\n\nIn the past (for a very long time), when using data.frame() to create a data.frame, it will automatically convert strings to factors. This is changed recently that the default setting is not to convert.\nWhen using tibble() to create a tibble, the type of the inputs will never be changed.\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn tibble you may use nonsyntactic names as column names, which are invalid R variable names. To refer to these variables, you need to surround them with backticks `.\n\ntb <- tibble(\n    `:)` = \"smile\",\n    ` ` = \"space\",\n    `2000` = \"number\"\n)\ntb\n\n# A tibble: 1 × 3\n  `:)`  ` `   `2000`\n  <chr> <chr> <chr> \n1 smile space number\n\n\n\n\n\n\n8.1.2 Differences between tibble and data.frame.\n\n8.1.2.1 Printing\nTibbles have a refined print method that shows only the first 10 rows and all the columns that fit on screen.\n\ndeck <- tibble(suit=rep(c('spades', 'hearts', 'clubs', 'diamonds'), 13), face=rep(1:13, 4))\ndeck\n\n# A tibble: 52 × 2\n   suit      face\n   <chr>    <int>\n 1 spades       1\n 2 hearts       2\n 3 clubs        3\n 4 diamonds     4\n 5 spades       5\n 6 hearts       6\n 7 clubs        7\n 8 diamonds     8\n 9 spades       9\n10 hearts      10\n# … with 42 more rows\n\n\n\n\n8.1.2.2 Subsetting\nTo get a single value, [[]] or $ should be used, just like for data.frame. These two are almost the same. The only difference is that [[]] accepts positions, but $ only accepts names.\nTo be used in a pipe, the special placeholder . will be used.\n\ndeck %>% .$face\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13  1  2  3  4  5  6  7  8  9 10 11 12\n[26] 13  1  2  3  4  5  6  7  8  9 10 11 12 13  1  2  3  4  5  6  7  8  9 10 11\n[51] 12 13\n\n\nWe will talk about pipes later.\n\n\n\n8.1.3 %>% symbol\n%>% is the pipeline symbol, which is another way to connect several functions. Most functions in tidyverse have the first argument data, and both the input data and the output are tibbles. The syntax here is that data %>% function(arguments) is the same as function(data, arguments). The benefit is that it is easier to have many functions consecutively applied to the data. Please see the following example.\n\ndata %>% function1(arguments1)\n    %>% function2(arguments2)\n    %>% function3(arguments3)\n    %>% function4(arguments4)\n\nfunction4(function3(function2(function1(data, arguments1), arguments2), arguments3), arguments4)\n\ndata2 <- function1(data, arguments1)\ndata3 <- function2(data2, arguments2)\ndata4 <- function3(data3, arguments3)\nfunction4(data4, arguments4)\n\nThe readability of the first one is much better than the second one. Comparing to the third one, we don’t need to create a lot of intermedia temporary variables."
  },
  {
    "objectID": "contents/8/08-.html#exercises",
    "href": "contents/8/08-.html#exercises",
    "title": "8  R for Data Sciences",
    "section": "8.5 Exercises",
    "text": "8.5 Exercises\n\nExercise 8.1 How can you tell if an object is a tibble?\n\n\nExercise 8.2 Compare and contrast the following operations on a data.frame and equivalent tibble. What is different? Why might the default data frame behaviors cause you frustration?\n\ndf <- data.frame(abc = 1, xyz = \"a\")\ndf$x\ndf[, \"xyz\"]\ndf[, c(\"abc\", \"xyz\")]\n\n\n\nExercise 8.3 If you have the name of a variable stored in an object, e.g., var <- \"xyz\", how can you extract the reference variable from a tibble? You may use the following codes to get a tibble.\n\ntbl <- tibble(abc = 1, xyz = \"a\")\n\n\n\nExercise 8.4 Practice referring to nonsyntactic names in the following data.frame by:\n\nExtracting the variable called 1.\nCreating a new column called 3, which is 2 divided by 1.\nRenaming the columns to one, two, and three:\n\n\nannoying <- tibble(\n`1` = 1:10,\n`2` = `1` * 2 + rnorm(length(`1`))\n)"
  },
  {
    "objectID": "contents/8/08-.html#projects",
    "href": "contents/8/08-.html#projects",
    "title": "8  R for Data Sciences",
    "section": "8.6 Projects",
    "text": "8.6 Projects\n\n\n\n\nExercise 8.5 This is a Python question. Please download the datasets from here. It is the same datasets as in Example 8.2. Please use Python to finish the following tasks.\n\n\nExercise 8.6 Why are gather() and spread() not perfectly symmetrical? Carefully consider the following example:\n\nstocks <- tibble(\n    year = c(2015, 2015, 2016, 2016),\n    half = c( 1, 2, 1, 2),\n    return = c(1.88, 0.59, 0.92, 0.17)\n)\nstocks %>%\n    spread(year, return) %>%\n    gather(\"year\", \"return\", `2015`:`2016`)\n\n# A tibble: 4 × 3\n   half year  return\n  <dbl> <chr>  <dbl>\n1     1 2015    1.88\n2     2 2015    0.59\n3     1 2016    0.92\n4     2 2016    0.17\n\n\n(Hint: look at the variable types and think about column names.)\nBoth spread() and gather() have a convert argument. What does it do?\n\n\nExercise 8.7 Why does this code fail? ::: {.cell}\ntable4a %>%\n    gather(1999, 2000, key = \"year\", value = \"cases\")\n\nError in `loc_validate()`:\n! Can't subset columns past the end.\nℹ Locations 1999 and 2000 don't exist.\nℹ There are only 3 columns.\n\n\n:::\n\n\n\n\n[1] Wickham, H. and Grolemund, G. (2017). R for data science: Import, tidy, transform, visualize, and model data. O’Reilly Media."
  },
  {
    "objectID": "contents/7/07-.html#hello-world-for-r",
    "href": "contents/7/07-.html#hello-world-for-r",
    "title": "7  R Fundamentals",
    "section": "7.1 Hello world for R",
    "text": "7.1 Hello world for R\n\nprint('Hello world!')\n\n[1] \"Hello world!\""
  },
  {
    "objectID": "contents/7/07-.html#essential-concepts",
    "href": "contents/7/07-.html#essential-concepts",
    "title": "7  R Fundamentals",
    "section": "7.2 Essential concepts",
    "text": "7.2 Essential concepts\n\nIn R, assignments is <-, not =. = actually works, but it may cause confusions. So it is always recommended to use <-. The R Studio keybinding for <- is alt+-.\n. is NOT a special character in R, and can be used in variable names. So is.na() simply means a function called is.na. It is not a function na in a package is as in Python.\nIn R, the block is defined by {}. Indentation is not that important.\nR has a better package management system than Python, and therefore in most cases you don’t need virtual environment for R.\n\n\n7.2.1 R Markdown / Quarto\nThe counterpart of Jupyter notebook in R is .rmd/.qmd file. Similar to a notebook, in a R Markdown / Quarto file, there is a so-called code block that can run the codes inside to produce documents with both texts and codes and codes outputs.\nIn the following two sections about R, you are supposed to submit .rmd/.qmd file.\n\n\n\n\n\n\nNote\n\n\n\nQuarto is an extension/continuation of R Markdown. Most R Markdown file can be directly translated to a Quarto file without many modifications. The main difference between R Markdown and Quarto is that Quarto has better support for other languages such as Python and Julia. You may go to its homepage for more details.\nThis note is produced by Quarto.\n\n\nThe most import part of R Markdown / Quarto is the code block, that is\nprint('Hello world!')\nIn Quarto, you may also write\nprint('Hello world!')\nThere are many options to adjust how the code blocks are excacuted. You don’t need to worry about them right now. Currently just try to write your report together with code blocks.\n\n\n7.2.2 Development tools\n\n7.2.2.1 R Studio\nFor R, the almost definite choice of IDE is R Studio. You may download and install it from the homepage.\nNote that R Studio will soon be renamed to posit. Please keep an eye on it if it will make any differences.\n\n\n7.2.2.2 R Studio Cloud\nYou may directly go to the homepage to use R Stuido from cloud. If you don’t use it a lot it should be free.\n\n\n7.2.2.3 Google Colab\nYou may use R in Google Colab. The link is colab.to/r. After you open the notebook, you may go to Edit->Notebook settings to change Runtime type to be R.\nThe rest is similar to Jupyter notebook, while the codes are now R codes."
  },
  {
    "objectID": "contents/7/07-.html#data-structures",
    "href": "contents/7/07-.html#data-structures",
    "title": "7  R Fundamentals",
    "section": "7.3 Data structures",
    "text": "7.3 Data structures\nMain reference here is [1] and [2].\n\n7.3.1 Vectors\nVector is one of the basic data structure in R. It is created by c() function. Sometimes it is called atomic vector. You may store any data types in it. R recognizes six basic types: double, integers, characters, logicals, complex and raw.\nThe data type inside a vector can be checked by typeof function.\n\ndie <- c(1, 2, 3, 4, 5, 6)\ntypeof(die)\n\n[1] \"double\"\n\n\nFor consecutive numbers, an easier way to create vector is to use :.\n\ndie <- 1:6\n\n\n\n\n\n\n\nDanger\n\n\n\nNote that vector index starts from 1 in R, while list index starts from 0 in Python.\n\n\n\ndie[1]\n\n[1] 1\n\n\nWhen slicing with vectors, don’t forget to use c().\n\ndie[c(2, 3)]\n\n[1] 2 3\n\n\n\ndie[2:3]\n\n[1] 2 3\n\n\nYou may use length() function to get its length.\n\nlength(die)\n\n[1] 6\n\n\n\n\n7.3.2 Attributes\nR objects may have attributes. Attributes won’t be shown by default when you show the object. You may find the attributes of a R object by calling the attributes() function.\nThe following example show that the vector die defined in Section 7.3.1 doesn’t have attributes.\n\nattributes(die)\n\nNULL\n\n\nAttributes can be read and write using attr function. See the following example.\n\nExample 7.1  \n\nattr(die, 'date') <- '2022-01-01'\ndie\n\n[1] 1 2 3 4 5 6\nattr(,\"date\")\n[1] \"2022-01-01\"\n\nattr(die, 'date') <- NULL\ndie\n\n[1] 1 2 3 4 5 6\n\n\n\nYou may think attributes as metadata attached to a R object. They are used to tell some useful infomation of the object. Some functions will interact with certain attributes. R itself treat attributes class, comment, dim, dimnames, names, row.names and tsp specially. We will only talk about class and names here. dim will be discussed in the next section. Others will be discussed when we use them.\n\nclass: This is different from the class in Python. class in R is an attribute which talks about the class of an object. If the attribute class is not assigned to an object, the object will have an implicit class: matrix, array, function, numeric or the result of typeof.\n\nattr(x, 'class') will show the “external” class of an object. You may also use class(x) to read and write attribute class. If the class is not assigned, class(x) will show the implicit class, while attr(x, 'class') will show NULL.\n\nExample 7.2  \n\nattr(die, 'class')\n\nNULL\n\nclass(die)\n\n[1] \"integer\"\n\nclass(die) <- 'a die'\nattr(die, 'class')\n\n[1] \"a die\"\n\nclass(die)\n\n[1] \"a die\"\n\n\n\n\n\n\n\nnames: This attribute is used to name each element in a vector. After the names are assigned, it won’t be displayed below the data like other attributes. It will be displayed above the data with correct alignment. Similar to class, you may use names() to read and write the attribute.\n\n\nExample 7.3  \n\nnames(die) <- c('one', 'two', 'three', 'four', 'five', 'six')\ndie\n\n  one   two three  four  five   six \n    1     2     3     4     5     6 \n\nattributes(die)\n\n$names\n[1] \"one\"   \"two\"   \"three\" \"four\"  \"five\"  \"six\"  \n\nnames(die)\n\n[1] \"one\"   \"two\"   \"three\" \"four\"  \"five\"  \"six\"  \n\nis.vector(die)\n\n[1] TRUE\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nWhen you store different types of data into a single vector in R, R will convert them into a single type. The default way to do so is\n\nif there are only logicals and numbers, logicals will be converted to numbers by TRUE->1 and FALSE->0.\nif characters are presented, all are converted to characters by what it is.\n\n\nc(1, TRUE)\n\n[1] 1 1\n\nc('1', 1, TRUE)\n\n[1] \"1\"    \"1\"    \"TRUE\"\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe can apply regular operators to vectors. The defaul way is to apply the operators element-wise.\n\n\n\n\n7.3.3 matrices and arrays\n\nm <- matrix(c(1,2,3,4,5,6), nrow=2)\nm[1, ]\n\n[1] 1 3 5\n\n\nA matrix has dim attribute.\n\ndim(m)\n\n[1] 2 3\n\n\nNote that by assigning and removing dim attribute, you may change the object between vectors and matrices.\n\nExample 7.4  \n\nm\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\nis.matrix(m)\n\n[1] TRUE\n\nis.vector(m)\n\n[1] FALSE\n\ndim(m)\n\n[1] 2 3\n\ndim(m) <- NULL\nm\n\n[1] 1 2 3 4 5 6\n\nis.matrix(m)\n\n[1] FALSE\n\nis.vector(m)\n\n[1] TRUE\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe dim of a matrix/vector can be a long vector. In this case, it will become an array.\n\n\n\n\n7.3.4 factors\nFactor is speical vector. It is a way to handle categorical data. The idea is the limit the possible values. In a factor all possible values are called level, which is an attribute.\n\nExample 7.5 We would like to talk about all months. We first define a vector of the valid levels:\n\nmonth_levels <- c(\n  \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n)\n\nThen we could start to transform some month vector into factors, by the function factor().\n\nx1 <- c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")\ny1 <- factor(x1, level=month_levels)\nsort(x1)\n\n[1] \"Apr\" \"Dec\" \"Jan\" \"Mar\"\n\nsort(y1)\n\n[1] Jan Mar Apr Dec\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\n\nNote that sorting y1 is based on the levels.\n\nx2 <- c(\"Dec\", \"Apr\", \"Jam\", \"Mar\")\ny2 <- factor(x2, level=month_levels)\ny2\n\n[1] Dec  Apr  <NA> Mar \nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\n\nNote that y2 contains NA value since there is an entry in x2 that is not valid.\n\n\n\n7.3.5 Lists\nList is very similar to a vector. The main difference is that vector can only store values, while list can store objects. The most typical example of objects is another vector. Please see the following example.\n\nExample 7.6  \n\nc(1:2, 3:4)\n\n[1] 1 2 3 4\n\nlist(1:2, 3:4)\n\n[[1]]\n[1] 1 2\n\n[[2]]\n[1] 3 4\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe attributes of an object is stored in an array.\n\nm <- matrix(c(1,2,3,4,5,6), nrow=2)\na <- attributes(m)\nclass(a)\n\n[1] \"list\"\n\n\n\n\n\n\n7.3.6 data.frame\nData.Frame is a list with the class attribute data.frame, together with some restriction on the shape of each columns. You may think about it in terms of tables.\n\ndf <- data.frame(face = c(\"ace\", \"two\", \"six\"),\n                 suit = c(\"clubs\", \"clubs\", \"clubs\"),\n                 value = c(1, 2, 3))\ndf\n\n  face  suit value\n1  ace clubs     1\n2  two clubs     2\n3  six clubs     3\n\n\n\nData Frame group vectors. Each vector represents a column.\nDifferent column can contain a different type of data, but every cell within one column must be the same type of data.\ndata.frame() can be used to create a data.frame.\nThe type of a data.frame is a list. Similar to matrix comparing to vector, a data.frame is a list with class data.frame, as well as a few other attributes.\n\n\n\n7.3.7 Examples\n\nExample 7.7 Consider a date.frame representing a deck of cards. Here we use expand.grid() to perform the Cartesian product.\n\nsuit <- c('spades', 'hearts', 'clubs', 'diamonds')\nface <- 1:13\ndeck <- expand.grid(suit, face)\nhead(deck)\n\n      Var1 Var2\n1   spades    1\n2   hearts    1\n3    clubs    1\n4 diamonds    1\n5   spades    2\n6   hearts    2\n\n\nWe may assign names to change the column names.\n\nnames(deck) <- c('suit', 'face')\nhead(deck)\n\n      suit face\n1   spades    1\n2   hearts    1\n3    clubs    1\n4 diamonds    1\n5   spades    2\n6   hearts    2\n\n\nNote that since suit and face are two vectors, merge() can also do the Cartesian product. expand.grid() is good for both vectors and data.frame.\n\ndeck <- merge(suit, face)\nhead(deck)\n\n         x y\n1   spades 1\n2   hearts 1\n3    clubs 1\n4 diamonds 1\n5   spades 2\n6   hearts 2\n\n\n\n\n\n7.3.8 Load data\n\n7.3.8.1 build-in datasets\nR has many build-in datasets. You may use data() to see all of them. Here are a few common datasets.\n\nmtcars: Motor Trend Car Road Tests: The data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models)\n\n\ndata(mtcars)\n\n\niris: iris data set gives the measurements in centimeters of the variables sepal length, sepal width, petal length and petal width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica.\n\n\ndata(iris)\n\n\nToothGrowth: ToothGrowth data set contains the result from an experiment studying the effect of vitamin C on tooth growth in 60 Guinea pigs.\n\n\ndata(ToothGrowth)\n\n\nPlantGrowth: Results obtained from an experiment to compare yields (as measured by dried weight of plants) obtained under a control and two different treatment condition.\n\n\ndata(PlantGrowth)\n\n\nUSArrests: This data set contains statistics about violent crime rates by us state.\n\n\ndata(USArrests)\n\n\n\n7.3.8.2 Read from files\nThe build-in read.csv() function can directly read .csv file into a data.frame.\n\nExample 7.8 We use the file yob1880.txt from Chapter 5 here. Put the file in the working folder and run the following code.\n\ndf <- read.csv('yob1880.txt', header = FALSE)\nhead(df)\n\n\n\n\nWe may also manually assign columns names.\n\nnames(df) <- c('name', 'sex', 'counts')\nhead(df)\n\n       name sex counts\n1      Mary   F   7065\n2      Anna   F   2604\n3      Emma   F   2003\n4 Elizabeth   F   1939\n5    Minnie   F   1746\n6  Margaret   F   1578\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo save data is straightforward.\n\nwrite.csv(df, file='df.csv', row.names=FALSE)\n\n\n\n\n\n\n7.3.9 Flow control\n\n7.3.9.1 for loop\n\nExample 7.9  \n\nfor (x in 1:10){\n    print(x)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n\n\n\n\n\n7.3.9.2 if-else\n\nExample 7.10  \n\na <- 200\nb <- 33\n\nif (b > a) {\n  print(\"b is greater than a\")\n} else if (a == b) {\n  print(\"a and b are equal\")\n} else {\n  print(\"a is greater than b\")\n}\n\n[1] \"a is greater than b\"\n\n\n\n\n\n7.3.9.3 Functions\nThe standard format to define a function is my_function <- function(input) {} where the function name is on the left side of <-, the input arguments are in the (), and the function body is in {}. The output of the last line of the function body is the return value of the function.\n\nExample 7.11  \n\nmyfunction <- function() {\n    die <- 1:6\n    sum(die)\n}\n\nmyfunction()\n\n[1] 21\n\n\nIf you just type the function name without (), R will return the definition of the function.\n\nmyfunction\n\nfunction() {\n    die <- 1:6\n    sum(die)\n}\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe function sample(x): sample takes a sample of the specified size from the elements of x using either with or without replacement.\nsample(x, size, replace = FALSE, prob = NULL):\n\nx: either a vector of one or more elements from which to choose, or a positive integer.\nsize: a non-negative integer giving the number of items to choose.\nreplace: should sampling be with replacement?\nprob: a vector of probability weights for obtaining the elements of the vector being sampled."
  },
  {
    "objectID": "contents/7/07-.html#r-notations",
    "href": "contents/7/07-.html#r-notations",
    "title": "7  R Fundamentals",
    "section": "7.4 R notations",
    "text": "7.4 R notations\n\n7.4.1 Selecting Values\nLet us start from a data.frame df. The basic usage is df[ , ], where the first index is to subset the rows and the second index is to subset the columns. There are six ways to writing indexes.\n\nPositive integers: the regular way.\n\n\ndf[i, j] means the data in the ith row and jth column.\nIf both i and j are vectors, a data.frame will be returned.\nIf i or j are a vector, a vector will be returned. If you still want a data.frame, you may add the option drop=FALSE.\nIf only one index is provided, it refers to the column.\n\n\nExample 7.12 We consider the simplified version of a deck. The deck only contains face values from 1 to 5. ::: {.cell}\n\n\ndeck[1:2, 1:2]\n\n    Var1 Var2\n1 spades    1\n2 hearts    1\n\ndeck[1:2, 1]\n\n[1] spades hearts\nLevels: spades hearts clubs diamonds\n\ndeck[1:2, 1, drop=FALSE]\n\n    Var1\n1 spades\n2 hearts\n\ndeck[1]\n\n       Var1\n1    spades\n2    hearts\n3     clubs\n4  diamonds\n5    spades\n6    hearts\n7     clubs\n8  diamonds\n9    spades\n10   hearts\n11    clubs\n12 diamonds\n13   spades\n14   hearts\n15    clubs\n16 diamonds\n17   spades\n18   hearts\n19    clubs\n20 diamonds\n\n\n:::\n\nNegative integers: remove the related index.\n\nFor example,\n\ndeck[-1, 1:3] means it wants all rows except row 1, and column 1 to 3.\ndeck[-(2:20), 1:2] means it wants all rows ecepte row 2 to row 20, and column 1 to 2.\nNegative index and positive index cannot be used together in the same index.\n\n\nBlank Spaces: want every value in the dimension.\n\n\ndeck[, 1]\n\n [1] spades   hearts   clubs    diamonds spades   hearts   clubs    diamonds\n [9] spades   hearts   clubs    diamonds spades   hearts   clubs    diamonds\n[17] spades   hearts   clubs    diamonds\nLevels: spades hearts clubs diamonds\n\ndeck[1, ]\n\n    Var1 Var2\n1 spades    1\n\n\n\nLogical values: select the rows or columns according to the value. The dimension should have exactly the same number of elements as the logical vector.\n\n\nrows <- c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE)\ndeck[rows,]\n\n       Var1 Var2\n1    spades    1\n3     clubs    1\n5    spades    2\n6    hearts    2\n8  diamonds    2\n10   hearts    3\n11    clubs    3\n13   spades    4\n15    clubs    4\n16 diamonds    4\n18   hearts    5\n20 diamonds    5\n\ndeck[1:2, c(TRUE, FALSE)]\n\n[1] spades hearts\nLevels: spades hearts clubs diamonds\n\n\n\nNames: select columns based on names attribute.\n\n\ndeck[, 'Var2']\n\n [1] 1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5 5 5 5\n\n\n\n\n7.4.2 Dollar signs and double brackets\nList and data.frame obey an optional second system of notation. You can extract values using $ syntax: the data.frame’s name and the column name separated by a $ will select a column and return a vector (since the data in each column is actually a vector).\n\nExample 7.13 Here is an exmaple about data.frames.\n\ndeck[, 1]\n\n [1] spades   hearts   clubs    diamonds spades   hearts   clubs    diamonds\n [9] spades   hearts   clubs    diamonds spades   hearts   clubs    diamonds\n[17] spades   hearts   clubs    diamonds\nLevels: spades hearts clubs diamonds\n\ndeck$Var1\n\n [1] spades   hearts   clubs    diamonds spades   hearts   clubs    diamonds\n [9] spades   hearts   clubs    diamonds spades   hearts   clubs    diamonds\n[17] spades   hearts   clubs    diamonds\nLevels: spades hearts clubs diamonds\n\n\nNote that if we select from the data.frame using index, we will get a data.frame.\n\ndeck[1]\n\n       Var1\n1    spades\n2    hearts\n3     clubs\n4  diamonds\n5    spades\n6    hearts\n7     clubs\n8  diamonds\n9    spades\n10   hearts\n11    clubs\n12 diamonds\n13   spades\n14   hearts\n15    clubs\n16 diamonds\n17   spades\n18   hearts\n19    clubs\n20 diamonds\n\nclass(deck[1])\n\n[1] \"data.frame\"\n\n\n\n\nExample 7.14 Here is an example about lists.\n\nlst <- list(numbers = c(1, 2), logical = TRUE, strings = c(\"a\", \"b\", \"c\"))\nlst$numbers\n\n[1] 1 2\n\n\nNote that if we select from the list using index, we will get a list.\n\nlst[1]\n\n$numbers\n[1] 1 2\n\nclass(lst[1])\n\n[1] \"list\"\n\n\n\nPlease think through these two examples and figure out the similarity between them.\n\n\n\n\n\n\nDanger\n\n\n\nUnderstanding the return value type is very important. Many of the R function work with vectors, but they don’t work with lists. So using the correct way to get values is very important.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThere is a command called attach() which let you get access to deck$face by just typing face. It is highly recommanded NOT to do this. It is much better to make everything explicit, especially when using IDE, typing is much easier."
  },
  {
    "objectID": "contents/7/07-.html#modifying-values",
    "href": "contents/7/07-.html#modifying-values",
    "title": "7  R Fundamentals",
    "section": "7.5 Modifying values",
    "text": "7.5 Modifying values\n\n7.5.1 Changing values in place\nYou can use R’s notation system to modify values within an R object.\n\nIn general when working with vectors, the two vectors should have the same length.\nIf the lengths are different, R will repeat the shorter one to make it match with the longer one. This is called the vector recycling rule. R will throw a warning if the two lengths are not proposional.\n\n\nExample 7.15  \n\n1:4 + 1:2\n\n[1] 2 4 4 6\n\n1:4 + 1:3\n\nWarning in 1:4 + 1:3: longer object length is not a multiple of shorter object\nlength\n\n\n[1] 2 4 6 5\n\n\n\n\nWe may create values that do not yet exist in the object. R will expand the object to accommodate the new values.\n\n\nExample 7.16  \n\nvec <- 1:6\nvec\n\n[1] 1 2 3 4 5 6\n\nvec[7] <- 0\nvec\n\n[1] 1 2 3 4 5 6 0\n\n\n\n\nExample 7.17  \n\ndf <- data.frame(a=c(1,2), b=c('a', 'b'))\ndf\n\n  a b\n1 1 a\n2 2 b\n\ndf$c <- 3:4\ndf\n\n  a b c\n1 1 a 3\n2 2 b 4\n\n\n\n\n\n7.5.2 Logical subsetting\nWe could compare two vectors element-wise, and the result is a logical vector. Then we could use this result to subset the vector / data.frame.\n\nExample 7.18  \n\nsuit <- c('spades', 'hearts', 'clubs', 'diamonds')\nface <- 1:5\ndeck <- expand.grid(suit, face)\n\n\ndeck$Var1 == 'hearts'\n\n [1] FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE\n[13] FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE\n\ndeck$Var2[deck$Var1 == 'hearts']\n\n[1] 1 2 3 4 5\n\ndeck[deck$Var1 == 'hearts',]\n\n     Var1 Var2\n2  hearts    1\n6  hearts    2\n10 hearts    3\n14 hearts    4\n18 hearts    5\n\n\nWe could directly assign values to the subset. Note that the following assignment create a new column with NA values.\n\ndeck$Var3[deck$Var1 == 'hearts'] <- 1\ndeck\n\n       Var1 Var2 Var3\n1    spades    1   NA\n2    hearts    1    1\n3     clubs    1   NA\n4  diamonds    1   NA\n5    spades    2   NA\n6    hearts    2    1\n7     clubs    2   NA\n8  diamonds    2   NA\n9    spades    3   NA\n10   hearts    3    1\n11    clubs    3   NA\n12 diamonds    3   NA\n13   spades    4   NA\n14   hearts    4    1\n15    clubs    4   NA\n16 diamonds    4   NA\n17   spades    5   NA\n18   hearts    5    1\n19    clubs    5   NA\n20 diamonds    5   NA\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nOther than the regualr logical operators, R provides a speical one: %in%.\nx %in% y: Is x in the vector y?\nIf x is a vector, the output is a vector with the same length as x, telling whether each element of x is in y or not.\n\n\n\n\n\n\n\n\nTip\n\n\n\nOther than the regular Boolean operators, R provides two special ones: any and all.\n\nany(cond1, cond2, ...): Are any of these conditions true?\nall(cond1, cond2, ...): Are all of these conditions true?\n\n\n\n\n\n7.5.3 Missing values NA\nIn R, missing values are NA, and you can directly work with NA. Any computations related to NA will return NA.\n\nna.rm: Most R functions come with the optional argument na.rm. If you set it to be TRUE, the function will ignore NA when evaluating the function.\n\n\nExample 7.19  \n\nmean(c(NA, 1:50))\n\n[1] NA\n\nmean(c(NA, 1:50), na.rm=TRUE)\n\n[1] 25.5\n\n\n\n\nis.na(): This is a function testing whether an object is NA."
  },
  {
    "objectID": "contents/7/07-.html#exercises",
    "href": "contents/7/07-.html#exercises",
    "title": "7  R Fundamentals",
    "section": "7.6 Exercises",
    "text": "7.6 Exercises\n\nExercise 7.1 Which of these are character strings and which are numbers? 1, \"1\", \"one\".\n\n\nExercise 7.2 Create an atomic vector that stores just the face names of the cards: the ace of spades, king of spades, queen of spades, jack of spades, and ten of spades. Which type of vector will you use to save the names?\nHint: The face name of the ace of spades would be ace and spades is the suit.\n\n\nExercise 7.3 Create the following matrix, which stores the name and suit of every card in a royal flush.\n\n\n     [,1]    [,2]    \n[1,] \"ace\"   \"spades\"\n[2,] \"king\"  \"spades\"\n[3,] \"queen\" \"spades\"\n[4,] \"jack\"  \"spades\"\n[5,] \"ten\"   \"spades\"\n\n\n\n\nExercise 7.4 Many card games assign a numerical value to each card. For example, in blackjack, each face card is worth 10 points, each number card is worth between 2 and 10 points, and each ace is worth 1 or 11 points, depending on the final score.\nMake a virtual playing card by combining “ace” “heart” and 1 into a vector. What type of atomic vector will result? Check if you are right, and explain your reason.\n\n\nExercise 7.5 Use a list to store a single playing card, like the ace of hearts, which has a point value of one. The list should save the face of the card, the suit, and the point value in separate elements.\n\n\nExercise 7.6 Consider the following data.frame.\n\nsuit <- c('spades', 'hearts', 'clubs', 'diamonds')\nface <- 1:5\ndeck <- expand.grid(suit, face)\n\nPlease write some codes to count how many rows whose Var1 are equal to hearts.\n\n\nExercise 7.7 Converte the following sentences into tests written with R code. - w <- c(-1, 0, 1). Is w positive? - x <- c(5, 15). Is x greater than 10 and less than 20? - y <- 'February'. Is object y the word February? - z <- c(\"Monday\", \"Tuesday\", \"Friday\"). Is every value in z a day of the week?"
  },
  {
    "objectID": "contents/7/07-.html#projects",
    "href": "contents/7/07-.html#projects",
    "title": "7  R Fundamentals",
    "section": "7.7 Projects",
    "text": "7.7 Projects\n\nExercise 7.8 Start a R Markdown / Quarto file. In the first section write a R code block to print Hello world!.\n\n\nExercise 7.9 Please write a function to shuffle the row of a data.frame. You may use the following data.frame deck for test.\n\nsuit <- c('spades', 'hearts', 'clubs', 'diamonds')\nface <- 1:13\ndeck <- expand.grid(suit, face)\n\n\n\n\n\n\n[1] Grolemund, G. (2014). Hands-on programming with r: Write your own functions and simulations. O’Reilly Media.\n\n\n[2] Wickham, H. and Grolemund, G. (2017). R for data science: Import, tidy, transform, visualize, and model data. O’Reilly Media."
  },
  {
    "objectID": "contents/8/08-.html#tidy-data",
    "href": "contents/8/08-.html#tidy-data",
    "title": "8  R for Data Sciences",
    "section": "8.2 Tidy Data",
    "text": "8.2 Tidy Data\nThe same underlying data can be represented in multiple ways. The following example shows the same data organized in four different ways.\n\nExample 8.2  \n\n\n\n\ntable1\n\n\ntable1\n\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <int>  <int>      <int>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\n\n\ntable2\n\n\ntable2\n\n# A tibble: 12 × 4\n   country      year type            count\n   <chr>       <int> <chr>           <int>\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\n\n\ntable3\n\n\ntable3\n\n# A tibble: 6 × 3\n  country      year rate             \n  <chr>       <int> <chr>            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n\n\n\nSpread across two tibbles.\n\n\ntable4a\n\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  <chr>        <int>  <int>\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n\ntable4b\n\n# A tibble: 3 × 3\n  country         `1999`     `2000`\n  <chr>            <int>      <int>\n1 Afghanistan   19987071   20595360\n2 Brazil       172006362  174504898\n3 China       1272915272 1280428583\n\n\n\n\nDefinition 8.1 A dataset is tidy if\n\nEach variable have its own column.\nEach observation have its own row.\nEach value have its oven cell.\n\n\nThese three conditions are interrelated because it is impossible to only satisfy two of the three. In pratical, we need to follow the instructions:\n\nPut each dataset in a tibble.\nPut each variable in a column.\n\nTidy data is a consistent way to organize your data in R. The main advantages are:\n\nIt is one consistent way of storing data. In other words, this is a consistent data structure that can be used in many cases.\nTo placing variables in columns allows R’s vectorized nature to shine.\n\nAll packages in the tidyverse are designed to work with tidy data.\n\n8.2.1 Tidying datasets\nMost datasets are untidy:\n\nOne variable might be spread across multiple columns.\nOne observation might be scattered across multiple rows.\n\n\n8.2.1.1 gather() and pivot_longer()\nA common problem is that the column names are not names of variables, but values of a variable. For example, table4a above has columns 1999 and 2000. These two names are actually the values of a variable year. In addition, each row represents two observations, not one.\n\ntable4a\n\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  <chr>        <int>  <int>\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n\n\nTo tidy this type of dataset, we need to gather those columns into a new pair of variables. We need three parameters:\n\nThe set of columns that represent values. In this case, those are 1999 and 2000.\nThe name of the variable. In this case, it is year. We also name it a key. -The name of the variable whose values are spread over the cells. In this case, it is the number of cases. We also name it a value.\n\nThen we apply gather.\n\ntable4a %>% gather(`1999`, `2000`, key='year', value='cases')\n\n# A tibble: 6 × 3\n  country     year   cases\n  <chr>       <chr>  <int>\n1 Afghanistan 1999     745\n2 Brazil      1999   37737\n3 China       1999  212258\n4 Afghanistan 2000    2666\n5 Brazil      2000   80488\n6 China       2000  213766\n\n\nWe can do the similar thing to table4b. Then we could combine the two tibbles together.\n\ntidy4a <- table4a %>% \n    gather(`1999`, `2000`, key='year', value='cases')\ntidy4b <- table4b %>% \n    gather(`1999`, `2000`, key='year', value='population')\nleft_join(tidy4a, tidy4b)\n\nJoining, by = c(\"country\", \"year\")\n\n\n# A tibble: 6 × 4\n  country     year   cases population\n  <chr>       <chr>  <int>      <int>\n1 Afghanistan 1999     745   19987071\n2 Brazil      1999   37737  172006362\n3 China       1999  212258 1272915272\n4 Afghanistan 2000    2666   20595360\n5 Brazil      2000   80488  174504898\n6 China       2000  213766 1280428583\n\n\npivot_longer() is an updated approach to gather(), designed to be both simpler to use and to handle more use cases. We recommend you use pivot_longer() for new code; gather() isn’t going away but is no longer under active development.\nThe main arguments of pivot_longer() is data, cols, names_to and values_to. The cols in data will be longer. A column with the name set by names_to will be added. The values of the column is the column names of the cols. A column with the name set by values_to will be added. The values of this column is the cell value of the original data.\n\ntable4a %>% pivot_longer(cols=c(`1999`, `2000`), names_to='year', values_to='cases')\n\n# A tibble: 6 × 3\n  country     year   cases\n  <chr>       <chr>  <int>\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n\n\n\n\n8.2.1.2 spread()\nAnother issuse is that an observation is scattered across multiple rows. Take table2 as an example. An observation is a country in a year, but each observation is spread across two rows.\n\ntable2\n\n# A tibble: 12 × 4\n   country      year type            count\n   <chr>       <int> <chr>           <int>\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\n\nWe could also apply spread().\n\nThe column that contains variable names, the key column. Here, it’s type.\nThe column that contains values forms multiple variables, the value column. Here, it’s count.\n\n\nspread(table2, key=type, value=count)\n\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <int>  <int>      <int>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\n\n\n\n\n\n\n\nNote\n\n\n\ngather() makes wide tables narrower and longer. spread() makes long tables shorter and wider.\n\n\npivot_wider() is an updated approach to spread(), designed to be both simpler to use and to handle more use cases. We recommend you use pivot_wider() for new code; spread() isn’t going away but is no longer under active development.\n\n\n8.2.1.3 separate()\n\n\n8.2.1.4 unite()"
  },
  {
    "objectID": "contents/8/08-.html#dplyr",
    "href": "contents/8/08-.html#dplyr",
    "title": "8  R for Data Sciences",
    "section": "8.3 dplyr",
    "text": "8.3 dplyr"
  },
  {
    "objectID": "contents/8/08-.html#ggplot2",
    "href": "contents/8/08-.html#ggplot2",
    "title": "8  R for Data Sciences",
    "section": "8.4 ggplot2",
    "text": "8.4 ggplot2"
  }
]