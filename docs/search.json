[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python/R for Data Science 2022 Fall",
    "section": "",
    "text": "This is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "chapters/1/01-.html",
    "href": "chapters/1/01-.html",
    "title": "1  Python Fundamentals",
    "section": "",
    "text": "Programmers familiar with traditional languages will find it easy to learn Python. All of the familiar constructs—loops, conditional statements, arrays, and so forth—are included, but many are easier to use in Python. Here are a few of the reasons why: - Types are associated with objects, not variables. A variable can be assigned a value of any type, and a list can contain objects of many types. This also means that type casting usually isn’t necessary and that your code isn’t locked into the straitjacket of predeclared types. - Python typically operates at a much higher level of abstraction. This is partly the result of the way the language is built and partly the result of an extensive standard code library that comes with the Python distribution. A program to download a web page can be written in two or three lines! - Syntax rules are very simple. Although becoming an expert Pythonista takes time and effort, even beginners can absorb enough Python syntax to write useful code quickly.\nPython is well suited for rapid application development. It isn’t unusual for coding an application in Python to take one-fifth the time it would in C or Java and to take as little as one-fifth the number of lines of the equivalent C program. This depends on the particular application, of course; for a numerical algorithm performing mostly integer arithmetic in for loops, there would be much less of a productivity gain. For the average application, the productivity gain can be significant.\n\n\n\n\n\n\n[1] [2] [3] [4] [5] [6]"
  },
  {
    "objectID": "chapters/1/01-.html#hello-world",
    "href": "chapters/1/01-.html#hello-world",
    "title": "1  Python Fundamentals",
    "section": "1.2 Hello world!",
    "text": "1.2 Hello world!\nWe will mainly focus on this code editor mode at the beginning and check our results or do some simple computations in the console.\nNotebook is another very popular mode to use Python. We will talk about it later.\n\n1.2.1 Set up Python environment using IDEs\nPlease follow the following steps to run your first line of Python codes.\nWe will talk about the relation between Python and Anaconda and more about packages sometime later.\n\nGo to Anaconda download page. Download and install Anaconda.\nThere are several IDEs for Python bundled with Anaconda. Pick any one you like. I personally use VS Code. Here we use Spyder as an example for now since it doesn’t require any configurations.\nHere is a screenshot of Spyder 5.1.5.\nThe right lower window is the console. Type the following code, and run. If Hello world! is displayed, the Python environment is set up successfully. Now you can start to play with Python!\n\n\nprint('Hello world!')\n\nHello world!\n\n\n\n\n1.2.2 Code editor\nThe left window is called Code Editor. You can write multiple lines of codes in the code editor and run them all together. The output results might appear in the console.\nAs shown in the screenshot, when press F5 to run file, the codes in the code editor will be excuted line by line.\nThe code in the example is\n\nprint('Hello world!')\n\nHello world!\n\nprint('Another line')\n# Everything after # are comments that won't be excuted.\n\nAnother line\n\n\n\n\n1.2.3 Indentation\nOne key feature about Python is that its structures (blocks) is determined by Indentation.\nLet’s compare with other languages. Let’s take C as an example. ::: {.cell}\n#/*This is a C function.*/\n#int f(int x){return x;}\n::: The block is defined by {} and lines are separated by ;. space and newline are not important when C runs the code. It is recommended to write codes in a “beautiful, stylish” format for readibility, as follows. However it is not mandatary. ::: {.cell}\n#/*This is a C function.*/\n#int f(int x) {\n#    return x;\n#}\n:::\nIn Python, blocks starts from : and then are determined by indents. Therefore you won’t see a lot of {} in Python, and the “beautiful, stylish” format is mandatary. ::: {.cell}\n# This is a Python function.\ndef f(x):\n    return x\n:::\nThe default value for indentation is 4 spaces, which can be changed by users. We will just use the default value in this course."
  },
  {
    "objectID": "chapters/1/01-.html#built-in-types-1",
    "href": "chapters/1/01-.html#built-in-types-1",
    "title": "1  Python Fundamentals",
    "section": "2.1 Built-in Types",
    "text": "2.1 Built-in Types\nThere are severl built-in data structures in Python. Here is an (incomplete) list: - None - Boolean – True, False - Numeric Types — int, float, complex - Sequence Types — list - Text Sequence Type — str - Map type - dict\nWe will cover numeric types and strings in this section. The rests are either simple that are self-explained, or not simple that will be discussed later.\nYou may always use type(x) to detect the type of the object x.\n\n2.1.1 Numeric types and math expressions\nNumeric types are represented by numbers. If there are no confusions, Python will automatically detect the type. ::: {.cell}\nx = 1 # x is an int.\ny = 2.0 # y is a float.\n::: Python can do math just like other programming languages. The basic math operations are listed as follows. - +, -, *, /, >, <, >=, <= works as normal. - ** is the power operation. - % is the mod operation. - != is not equal\n\n\n2.1.2 Strings\nScalars are represented by numbers and strings are represented by quotes. Example:\nx = 1       # x is a scalar.\ny = 's'     # y is a string with one letter.\nz = '0'     # z loos like a number, but it is a string.\nw = \"Hello\" # w is a string with double quotes.\nHere are some facts. 1. For strings, you can use either single quotes or double quotes. 2. \\ is used to denote escaped words. You may find the list Here. 3. There are several types of scalars, like int, float, etc.. Usually Python will automatically determine the type of the data, but sometimes you may still want to declare them manually. 4.\nAlthough str is a built-in type, there are tons of tricks with str, and there are tons of packages related to strings. Generally speaking, to play with strings, we are interested in two types of questions. - Put information together to form a string. - Extract information from a string. We briefly talk about these two tasks.\n\n2.1.2.1 concat\n\n\n2.1.2.2 split\nThere is a very subtle relations between the variable / constant and the name of the variable / constant. We"
  },
  {
    "objectID": "chapters/1/01-.html#flows",
    "href": "chapters/1/01-.html#flows",
    "title": "1  Python Fundamentals",
    "section": "2.2 Flows",
    "text": "2.2 Flows"
  },
  {
    "objectID": "chapters/1/01-.html#logic",
    "href": "chapters/1/01-.html#logic",
    "title": "1  Python Fundamentals",
    "section": "2.3 Logic",
    "text": "2.3 Logic"
  },
  {
    "objectID": "chapters/1/01-.html#exercises",
    "href": "chapters/1/01-.html#exercises",
    "title": "1  Python Fundamentals",
    "section": "2.4 Exercises",
    "text": "2.4 Exercises\n\n2.4.1 Indentation\nPlease tell the differences between the following codes. If you don’t understand for don’t worry about it. Just focus on the indentation and try to understand how the codes work.\n\nfor i in range(10):\n    print('Hello world!')\n\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\n\nprint('Hello world!')\n\nHello world!\n\n\n\nfor i in range(10):\n    print('Hello world!')\n    print('Hello world!')\n\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\nHello world!\n\n\n\n# for i in range(10):\n# print('Hello world!')\n# print('Hello world!')\n\n\n\nfor i in range(10):\n    pass\nprint('Hello world!')\n\nHello world!\n\nprint('Hello world!')\n\nHello world!\n\n\n\n\n2.4.2 Play with built-in data types\n\nprint(True and True)\n\nTrue\n\nprint(True or True)\n\nTrue\n\nprint(False and True)\n\nFalse\n\nprint((1+1>2) or (1-1<1))\n\nTrue\n\n\n\n\n2.4.3 Play with strings"
  },
  {
    "objectID": "chapters/1/01-.html#projects",
    "href": "chapters/1/01-.html#projects",
    "title": "1  Python Fundamentals",
    "section": "2.5 Projects",
    "text": "2.5 Projects\njupyter notebook\n\n2.5.1 Gnomic data\nlists of data\n\n\n\n\n[1] Klosterman, S. (2021). Data science projects with python: A case study approach to gaining valuable insights from real data with machine learning. Packt Publishing, Limited.\n\n\n[2] Ramalho, L. (2015). Fluent python : Clear, concise, and effective programming: Clear, concise, and effective programming. O’Reilly Media.\n\n\n[3] Shaw, Z. A. (2017). Learn python 3 the hard way. Addison Wesley.\n\n\n[4] Shaw, Z. A. (2017). Learn more python 3 the hard way: The next step for new python programmers. ADDISON WESLEY PUB CO INC.\n\n\n[5] Ceder, N. R. (2018). The quick python book. MANNING PUBN.\n\n\n[6] Youens-Clark, K. (2020). Tiny python projects. Manning Publications."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "[1] Ceder, N. R.\n(2018). The\nquick python book. MANNING PUBN.\n\n\n[2] Klosterman, S.\n(2021). Data\nscience projects with python: A case study approach to gaining valuable\ninsights from real data with machine learning. Packt\nPublishing, Limited.\n\n\n[3] Ramalho, L.\n(2015). Fluent\npython : Clear, concise, and effective programming: Clear, concise, and\neffective programming. O’Reilly Media.\n\n\n[4] Shaw, Z. A.\n(2017). Learn\npython 3 the hard way. Addison Wesley.\n\n\n[5] Shaw, Z. A.\n(2017). Learn\nmore python 3 the hard way: The next step for new python\nprogrammers. ADDISON WESLEY PUB CO INC.\n\n\n[6] Youens-Clark, K.\n(2020). Tiny python\nprojects. Manning Publications."
  }
]