[
  {
    "objectID": "contents/6/06-.html",
    "href": "contents/6/06-.html",
    "title": "6  Classes/Packages for Python",
    "section": "",
    "text": "Functions are declared with the def keyword and returned from the return keyword.\n\n\nExample 6.1 \ndef my_function(x, y, z=1.5):\n    if z > 1:\n        return z * (x + y)\n    else:\n        return z / (x + y)\n\n\nEach function can have positional arguments and keyword arguments.\n\nKeyword arguments are most commonly used to specify default values.\nIf no keywords are given, all arguments will be recognized by the positions.\nIf both positional arguments and keyword arguments are given, positional arguments have to be in front.\nThe order of keyword arguments are not important.\n\n\n\n\n\n\n\nNote\n\n\n\nAlthough there are global variable, it is always ecouraged to use local variables only. This means that the variables in and out of a function (as well as classes that we will talk about later) are not the same, even if they have the same name.\n\n\n\nExample 6.2 (Mutable objects as default value) It is highly recommended NOT to set any mutatable objects as the default value of an input of a function. The reason is that this default object is initialized when the function is defined, not when the function is called. Then all function calls will share the same default object.\nA typical example is an empty list. If you use an empty list as the defaul value, that list will be passed to the next function call, which is no longer empty. Please see the following example.\n\ndef add(x=[]):\n    x.append(1)\n    return x\n\nadd()\n\n[1]\n\n\n\nadd()\n\n[1, 1]\n\n\n\nadd()\n\n[1, 1, 1]\n\n\nEvery time the function is called with no arguments, the default value is used, which is the same list initialized at the beginning. The list at the begining is an empty list. But after we put things inside, it is no longer empyt.\nIf you want to set a mutable object as a default, the way is as follows:\n\ndef add(x=None):\n    if x is None:\n        x = list()\n    x.append(1)\n    return x\n\nadd()\n\n[1]\n\n\n\nadd()\n\n[1]\n\n\n\nadd()\n\n[1]"
  },
  {
    "objectID": "contents/6/06-.html#classes",
    "href": "contents/6/06-.html#classes",
    "title": "6  Classes/Packages for Python",
    "section": "6.2 Classes",
    "text": "6.2 Classes\nA class is an abstract structure that can be used to hold both variables and functions. Variables in a class are called attributes, and functions in a class are called methods.\nA class is defined in the following way.\n\nclass Circle:\n    def __init__(self, radius=1):\n        self.radius = radius\n    \n    def area(self):\n        return self.radius**2*3.14 \n\nIn this example, we define a class Circle, which represents a circle. There is one attribute radius, and one method area. When define a cirlce, we need to specify its radius, and we could use the method area to compute the area of the circle.\n\ncir1 = Circle()\ncir2 = Circle(radius=5)\n\ncir1.area()\n\n3.14\n\n\n\ncir2.area()\n\n78.5\n\n\nHere we define two circles. The first circle cir1 is of radius 1. This 1 comes from the default value. Check the definition of Circle.__init__().\nThe second circle cir2 is of radius 5, and this number is specified when we initialize the Circle instance.\nThen we compute the areas of these two circles by calling the area() method. You can also use cir1.radius to get access the radius of the circle. The syntax difference between attributes and methods is the () at the end.\n\n6.2.1 self\nYou may notice the self variable in the definition of the classes. The self is used to refered to the class its. When you want to get access to the class attributes or the class methods, you may use self.\nTake the code as an example.\n\nclass Circle:\n    def __init__(self, radius=1):\n        self.radius = radius\n\nIn the __init__ function, there are two radius.\n\nradius is the local variable that is used by the function. It is also the input argument.\nself.radius is the class attribute, that is shared by all class methods. For example, we may add another class method to the class Circle.\n\n\nclass Circle:\n    def __init__(self, radius=1):\n        self.radius = radius\n    \n    def area(self):\n        return self.radius**2*3.14 \n    \n    def perimeter(self):\n        return self.radius*3.14*2\n\nBoth area() and perimeter() use the same self.radius.\n\n\n\n\n\n\nNote\n\n\n\nClass attributes are defined in the __init__() function.\n\n\n\n\n6.2.2 A design example\nAssume that we live in a world without Pandas, and we would like to design a table object. Then what do we need?\nA table should have multiple rows and multiple columns. We should be able to get access entries by columns and row index. We should also be able to display the table by using the print funciton.\n\n\n\n\n\n\nNote\n\n\n\nThe .__str__() method will be called when you try to print the object. If you don’t explicitly override it, the type of the object will be shown.\n\n\nTherefore we may write the following class.\n\nclass myTableClass():\n    def __init__(self, listoflist=None):\n        if listoflist is None:\n            listoflist = [[]]\n        self.nrows = len(listoflist)\n        self.ncols = len(listoflist[0])\n        self.data = listoflist\n        self.shape = (self.nrows, self.ncols)\n    \n    def get(self, i, j):\n        return self.data[i][j]\n\n    def __str__(self):\n        tmp = [' '.join([str(x) for x in row]) for row in self.data]\n        return '\\n'.join(tmp)\n\nThis is a very brief table object. We may add more things to it. For example, we could talk about column names.\n\nclass myTableClass():\n    def __init__(self, listoflist=None, columns=None):\n        if listoflist is None:\n            listoflist = [[]]\n        if columns is None:\n            columns = list()\n        self.nrows = len(listoflist)\n        self.ncols = len(listoflist[0])\n        self.data = listoflist\n        self.shape = (self.nrows, self.ncols)\n        self.columns = columns\n    \n    def get(self, i, j):\n        return self.data[i][j]\n\n    def rename(self, columns=None):\n        if columns is not None:\n            self.columns = columns\n\n    def __str__(self):\n        tmp = [' '.join([str(x) for x in row]) for row in self.data]\n        if len(self.columns) != 0:\n            tmp.insert(0, self.columns)\n        return '\\n'.join(tmp)\n\n\n\n\n\n\n\nNote\n\n\n\nIn Jupyter notebook or similar environment, we might directly call df to show a DataFrame and the shown DataFrame is rendered very pretty. This is due to the IPython.display.display() method, and is part of IPython console components."
  },
  {
    "objectID": "contents/6/06-.html#inheritance",
    "href": "contents/6/06-.html#inheritance",
    "title": "6  Classes/Packages for Python",
    "section": "6.3 Inheritance",
    "text": "6.3 Inheritance\nOne of the most important feature of classes is inheritance. Attributes and methods can be passed from parents to children, and child classes can override those attributes and methods if needed.\nFor example, we would like to first write a people class.\n\nclass people():\n    def __init__(self, name='default', age=20):\n        self.name = name\n        self.age = age\n\n    def eat(self):\n        print('eat something.')\n\nThis people class defines a people who can eat. Then using this people class, we could build a children class: student.\n\nclass student(people):\n    pass\n\n\nstu1 = student('name1', 10)\nstu1.eat()\nstu1.name\n\neat something.\n\n\n'name1'\n\n\n\ntype(stu1)\n\n__main__.student\n\n\nNow you can see that this stu1 is a student, but it has all attributes and methods as a people. However at current stage student and people are exactly the same since we don’t have any new codes for student. Let us improve it a little bit.\n\nclass student(people):\n    def __init__(self, name='default', age=20, grade=1):\n        super().__init__(name, age)\n        self.grade = grade\n\n    def eat(self):\n        print('eat in the cafe.')\n\nstu1 = student('name1', 10)\nstu1.eat()\n\neat in the cafe.\n\n\nNow student class override the eat() method from people. If someone is a student, he or she will eat in the cafe instead of just eat something.\nIn addition, you may also notice that the __init__() constructor function is also overriden. The first part is super().__init__(name, age) which is just call the people’s constructor function. The second part is new in student, that we add a new attribute grade to it. Now stu1 have attributes from people and the new attribute defined in student.\n\nstu1.name, stu1.age\n\n('name1', 10)\n\n\n\nstu1.grade\n\n1"
  },
  {
    "objectID": "contents/6/06-.html#packages-modules",
    "href": "contents/6/06-.html#packages-modules",
    "title": "6  Classes/Packages for Python",
    "section": "6.4 packages / modules",
    "text": "6.4 packages / modules\nMain reference is RealPython and [1].\n\n6.4.1 import\nIn most cases we won’t only write one single Python file. If we want to use codes from other files, we need to import.\n\nIf both files are in the same folder, e.g. file1.py and file2.py, you may just put import file2 in file1.py, and use file2.myfunction() to call functions or variables defined in file2.py.\nIf both files are in the same folder, and you just want to use one function from file1.py in file2.py, you may from file1 import myfunction(), and then directly write myfunction() in file2.py.\n\n\nExample 6.3 This is from file1.py.\n\ns = \"This is from file1.py.\"\na = [100, 200, 300]\nprint(s)\n\ndef foo(arg):\n    print(f'arg = {arg}')\n\nclass Foo:\n    pass\n\nThis is from file1.py.\n\n\nIn file2.py, we could get access to these variables and functions and classes as follows.\n\nimport file1\nfile1.s\n\n'This is from file1.py.'\n\n\n\nfile1.a\n\n[100, 200, 300]\n\n\n\nfile1.foo(file1.a)\n\narg = [100, 200, 300]\n\n\n\nfile1.Foo()\n\n<file1.Foo at 0x151c4d29e20>\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAn alternative way is to use from <module> import <names> to directly use the names without the file1. prefix.\n\n\nPlease see the following Example to get a feel about how namespace works.\n\n\nExample 6.4 \ns = 'foo'\na = ['foo', 'bar', 'baz']\n\nfrom file1 import s as string, a as alist\ns\n\n'foo'\n\n\n\nstring\n\n'This is from file1.py.'\n\n\n\na\n\n['foo', 'bar', 'baz']\n\n\n\nalist\n\n[100, 200, 300]\n\n\n\nWe may use dir() to look at all objects in the current namespace.\n\n\n6.4.2 __name__\n__name__ is a variable to tell you want is the current active namespace. See the following example.\n\n\nExample 6.5 \nimport file1\nfile1.__name__\n\n'file1'\n\n\nThe result file1 means that the codes in file1.py are now treated as a package and are imported into other files.\n\n__name__\n\n'__main__'\n\n\nThe result __main__ means that the codes we are writing now are treated as in the “active” enviroment.\nYou may see the following codes in a lot of places.\n\nif __name__ == '__main__':\n    pass\n\nIt means that the following codes will only be run in the “active” mode. If you import the codes as a package, these part of codes won’t be run.\n\n\n\n6.4.3 Packages\nPacages is a way to group and organize mutliple modules. It allow for a hierachical structuring of the module namespace using dot notation.\nCreating a package is straightforward, since it makes use of the operating system’s inherent hierarchical file structure.\nPython defines two types of packages, regular packages and namespace packages. The above package is the regular one. Namespace packages allow codes are spread among different folders. We won’t talk about it in this course.\nTo create a regular package, what you need to do is to organize the files in suitable folders, and then add an __init__.py in each folder. The file can be empty, or you could add any initialization codes for the package which is represented by the folder.\n\n\n\n\n\n\nNote\n\n\n\nIn the past __init__.py is required for a package. After Python 3.3 the namespace package is introduced, the __init__.py is not required (but recommended) for regular packages, and cannot be used for namespace packages.\n\n\nLet us put the previous file1.py and file2.py into subfolder assests/codes/. To make it into a package assests and a subpackage codes, we need to put __init__.py in each folder.\n\nimport assests.codes.file1 as f1\nf1.s\n\n'This is from file1.py.'"
  },
  {
    "objectID": "contents/6/06-.html#exercieses",
    "href": "contents/6/06-.html#exercieses",
    "title": "6  Classes/Packages for Python",
    "section": "6.5 Exercieses",
    "text": "6.5 Exercieses\n\nExercise 6.1 (Heron’s formula) Consider a triangle whose sides are \\(a\\), \\(b\\) and \\(c\\). Heron’s formula states that the area of this triangle is \\[\\sqrt{s(s−a)(s−b)(s−c)}\\quad\\text{ where } s=\\frac12(a+b+c).\\]\nPlease write a function that given three points computes the area of the triangle with vertices being the given points. The input is required to be a list of three tuples, where each tuple contains two numbers representing the 2d-coordinate of a point.\n\n\nExercise 6.2 (array) Write a function to reverse an 1D NumPy array (first element becomes last).\n\n\nExercise 6.3 (Compare two numpy arraies) Consider two numpy arraies x and y. Compare them entry by entry. We would like to know how many are the same.\nWrite a function that the inputs are x and y, and the output is the number of the same numbers."
  },
  {
    "objectID": "contents/6/06-.html#projects",
    "href": "contents/6/06-.html#projects",
    "title": "6  Classes/Packages for Python",
    "section": "6.6 Projects",
    "text": "6.6 Projects\nProblems are based on [2].\n\nExercise 6.4 (Comma Code) Say you have a list value like this: spam = ['apples', 'bananas', 'tofu', 'cats'].\nWrite a function that takes a list value as an argument and returns a string with all the items separated by a comma and a space, with and inserted before the last item. For example, passing the previous spam list to the function would return ‘apples, bananas, tofu, and cats’. But your function should be able to work with any list value passed to it. Be sure to test the case where an empty list [] is passed to your function.\n\n\nExercise 6.5 (Fantasy Game Inventory) You are creating a fantasy video game. The data structure to model the player’s inventory will be a dictionary where the keys are string values describing the item in the inventory and the value is an integer value detailing how many of that item the player has. For example, the dictionary value {'rope': 1, 'torch': 6, 'gold coin': 42, 'dagger': 1, 'arrow': 12} means the player has 1 rope, 6 torches, 42 gold coins, and so on.\nWrite a function named displayInventory() that would take any possible inventory and display it like the following:\n\nInventory:\n12 arrow\n42 gold coin\n1 rope\n6 torch\n1 dagger\nTotal number of items: 62\n\nNote that this is the function version of Exercise 2.17.\n\n\nExercise 6.6 Create a Car class with two instance attributes:\n\n.color, which stores the name of the car’s color as a string.\n.mileage, which stores the number of miles on the car as an integer.\n\nThen instantiate two Car objects — a blue car with 20,000 miles and a red car with 30,000 miles — and print out their colors and mileage. Your expected output are below:\n\ncar1 = mycar(color='blue', mileage=20000)\ncar2 = mycar(color='red', mileage=30000)\n\nprint(car1)\nprint(car2)\n\nA blue car with 20000 mileage.\nA red car with 30000 mileage.\n\n\n\n\nExercise 6.7 Create a GoldenRetriever class that inherits from the Dog class. Give the sound argument of GoldenRetriever.speak() a default value of Bark. Use the following code for your parent Dog class:\n\nclass Dog:\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self):\n        return f\"{self.name} is {self.age} years old\"\n\n    def speak(self, sound):\n        return f\"{self.name} says {sound}\"\n\n\n\n\n\n\n[1] Beuzen, T. and Timbers, T. (2022). Python packages. Taylor & Francis Group.\n\n\n[2] Sweigart, A. (2020). Automate the boring stuff with python, 2nd edition practical programming for total beginners: Practical programming for total beginners. No Starch Press."
  },
  {
    "objectID": "contents/5/05-.html",
    "href": "contents/5/05-.html",
    "title": "5  Visualization",
    "section": "",
    "text": "The main reference for this Chapter is [1]."
  },
  {
    "objectID": "contents/5/05-.html#matplotlib.pyplot",
    "href": "contents/5/05-.html#matplotlib.pyplot",
    "title": "5  Visualization",
    "section": "5.1 matplotlib.pyplot",
    "text": "5.1 matplotlib.pyplot\nmatplotlib is a modern and classic plot library. Its main features are inspired by MATLAB. In this book we mostly use pyplot package from matplotlib. We use the following import convention:\n\nimport matplotlib.pyplot as plt\n\n\n5.1.1 matplotlib interface\nmatplotlib has two major application interfaces, or styles of using the library:\n\nAn explicit Axes interface that uses methods on a Figure or Axes object to create other Artists, and build a visualization step by step. You may treat this Figure object as a canvas, and Axes as plots on a canvas. There might be one or more plots on one canvas. This has also been called an object-oriented interface.\nAn implicit pyplot interface that keeps track of the last Figure and Axes created, and adds Artists to the object it thinks the user wants.\n\nHere is an example of an explicit interface.\n\nfig = plt.figure()\nax = fig.subplots()\nax.plot([1, 2, 3, 4], [0, 0.5, 1, 0.2])\n\n\n\n\nHere is an example of an implicit interface.\n\nplt.plot([1, 2, 3, 4], [0, 0.5, 1, 0.2])\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf the plot is not shown, you may want to type plt.show() to force the plot being rendered. However, to make plt.show() work is related to switching matplotlib backends, and is sometimes very complicated.\n\n\nThe purpose to explicitly use fig and ax is to have more control over the configurations. The first important configuration is subplots.\n\n.subplot()\n.subplots()\n.add_subplot()\n\nPlease see the following examples.\n\n\nExample 5.1 \nplt.subplot(1, 2, 1)\nplt.plot([1, 2, 3], [0, 0.5, 0.2])\n\n\n\n\n\n\n\nExample 5.2 \nplt.subplot(1, 2, 1)\nplt.plot([1, 2, 3], [0, 0.5, 0.2])\nplt.subplot(1, 2, 2)\nplt.plot([3, 2, 1], [0, 0.5, 0.2])\n\n\n\n\n\n\n\nExample 5.3 \nfig, axs = plt.subplots(1, 2)\naxs[0].plot([1, 2, 3], [0, 0.5, 0.2])\naxs[1].plot([3, 2, 1], [0, 0.5, 0.2])\n\n\n\n\n\n\n\nExample 5.4 \nimport numpy as np\nfig = plt.figure()\nax1 = fig.add_subplot(2, 2, 1)\nax2 = fig.add_subplot(2, 2, 3)\nax3 = fig.add_subplot(1, 2, 2)\n\nax3.plot([1, 2, 3], [0, 0.5, 0.2])\n\n\n\n\nThe auguments 2, 2, 1 means that we split the figure into a 2x2 grid and the axis ax1 is in the 1st position. The rest is understood in the same way.\n\n\nExample 5.5 If you don’t explicitly initialize fig and ax, you may use plt.gcf() and plt.gca() to get the handles for further operations.\n\nplt.subplot(1, 2, 1)\nax = plt.gca()\nax.plot([1, 2, 3], [0, 0.5, 0.2])\n\nplt.subplot(1, 2, 2)\nax = plt.gca()\nax.plot([3, 2, 1], [0, 0.5, 0.2])\n\n\n\n\n\nThe purpose to explicitly use fig and ax is to have more control over the configurations. For example, when generate a figure object, we may use figsize=(3, 3) as an option to set the figure size to be 3x3. dpi is another commonly modified option.\n\nfig = plt.figure(figsize=(2, 2), dpi=50)\nplt.plot([1, 2, 3], [0, 0.5, 0.2])\n\n\n\n\nIf you would like to change this setting later, you may use the following command before plotting.\n\nfig.set_size_inches(10, 10)\nfig.set_dpi(300)\nplt.plot([1, 2, 3], [0, 0.5, 0.2])\n\n\n\n\nYou may use fig.savefig('filename.png') to save the image into a file.\n\n\n5.1.2 Downstream packages\nThere are multiple packages depending on matplotlib to provide plotting. For example, you may directly plot from a Pandas DataFrame or a Pandas Series.\n\n\nExample 5.6 \nimport pandas as pd\nimport numpy as np\ns = pd.Series(np.random.randn(10).cumsum(), index=np.arange(0, 100, 10))\ns.plot()\n\n<AxesSubplot:>\n\n\n\n\n\n\ndf = pd.DataFrame(np.random.randn(10, 4).cumsum(0),\n                  columns=['A', 'B', 'C', 'D'],\n                  index=np.arange(0, 100, 10))\ndf.plot()\n\n<AxesSubplot:>\n\n\n\n\n\n\n\n\n5.1.3 plotting\n\n5.1.3.1 plt.plot()\nThis is the command for line plotting. You may use linestyle='--' and color='g' to control the line style and color. The style can be shortened as g--.\nHere is a list of commonly used linestyles and colors.\n\nline styles\n\nsolid or -\ndashed or --\ndashdot or -.\ndotted or :\n\nmarker styles\n\no as circle markers\n+ as plusses\n^ as triangles\ns as squares\n\ncolors\n\nb as blue\ng as green\nr as red\nk as black\nw as white\n\n\nThe input of plt.plot() is two lists x and y. If there is only one list inputed, that one will be recognized as y and the index of elements of y will be used as the dafault x.\n\n\nExample 5.7 \nplt.plot(np.random.randn(30).cumsum(), color='r', linestyle='--', marker='o')\n\n\n\n\nYou may compare it with this Example for the purpose of seaborn from next Section.\n\n\n\n5.1.3.2 plt.bar() and plt.barh()\nThe two commands make vertical and horizontal bar plots, respectively. ::: {#exm-}\n\nimport pandas as pd\ndata = pd.Series(np.random.rand(16), index=list('abcdefghijklmnop'))\n\nfig, axes = plt.subplots(2, 1)\naxes[0].bar(x=data.index, height=data, color='k', alpha=0.7)\naxes[1].barh(y=data.index, width=data, color='b', alpha=0.7)\n\n<BarContainer object of 16 artists>\n\n\n\n\n\nWe may also directly plot the bar plot from the Series.\n\nfig, axes = plt.subplots(2, 1)\ndata.plot.bar(ax=axes[0], color='k', alpha=0.7)\ndata.plot.barh(ax=axes[1], color='b', alpha=0.7)\n\n<AxesSubplot:>\n\n\n\n\n\n:::\nWith a DataFrame, bar plots group the values in each row together in a group in bars. This is easier if we directly plot from the DataFrame.\n\n\nExample 5.8 \ndf = pd.DataFrame(np.random.rand(6, 4),\n                  index=['one', 'two', 'three', 'four', 'five', 'six'],\n                  columns=pd.Index(['A', 'B', 'C', 'D'], name='Genus'))\ndf\n\n\n\n\n\n  \n    \n      Genus\n      A\n      B\n      C\n      D\n    \n  \n  \n    \n      one\n      0.268025\n      0.485530\n      0.398488\n      0.652136\n    \n    \n      two\n      0.017200\n      0.368818\n      0.332909\n      0.688050\n    \n    \n      three\n      0.787347\n      0.863378\n      0.323820\n      0.715752\n    \n    \n      four\n      0.406169\n      0.423606\n      0.340755\n      0.298033\n    \n    \n      five\n      0.666841\n      0.047128\n      0.561923\n      0.076109\n    \n    \n      six\n      0.892376\n      0.431945\n      0.298051\n      0.762146\n    \n  \n\n\n\n\n\ndf.plot.bar()\n\n<AxesSubplot:>\n\n\n\n\n\n\ndf.plot.barh(stacked=True, alpha=0.5)\n\n<AxesSubplot:>\n\n\n\n\n\n\n\n\n5.1.3.3 plt.scatter()\n\n\nExample 5.9 \nimport numpy as np\n\nN = 100\ndata = 0.9 * np.random.rand(N, 2)\narea = (20 * np.random.rand(N))**2 \nc = np.sqrt(area)\nplt.scatter(data[:, 0], data[:, 1], s=area, marker='^', c=c)\n\n<matplotlib.collections.PathCollection at 0x2183375e1f0>\n\n\n\n\n\n\n\n\n5.1.3.4 plt.hist()\nHere are two plots with build-in statistics. The plot command will have statistics as outputs. To disable it we could send the outputs to a temporary variable _. ::: {#exm-histogram1}\n\nmu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\ny = mu-30 + sigma*2 * np.random.randn(10000)\n_ = plt.hist(x, 50, density=True, facecolor='g', alpha=0.75)\n_ = plt.hist(y, 50, density=True, facecolor='r', alpha=0.75)\n\n\n\n\n:::\n\n\n\n5.1.4 plt.boxplot()\n\n\nExample 5.10 \nspread = np.random.rand(50) * 100\ncenter = np.ones(30) * 50\nflier_high = np.random.rand(10) * 100 + 100\nflier_low = np.random.rand(10) * -100\ndata = np.concatenate((spread, center, flier_high, flier_low)).reshape(50, 2)\n\n_ = plt.boxplot(data, flierprops={'markerfacecolor': 'g', 'marker': 'D'})\n\n\n\n\n\n\n\n5.1.5 Titles, labels and legends\n\nTitles\n\nplt.title(label), plt.xlabel(label), plt.ylabel(label) will set the title/xlabel/ylabel.\nax.set_title(label), ax.set_xlabel(label), ax.set_ylabel(label) will do the same thing.\n\nLabels\n\nplt methods\n\nxlim(), ylim(), xticks(), yticks(), xticklabels(), yticklabels()\nall the above with arguments\n\nax methods\n\nget_xlim(), get_ylim(), etc..\nset_xlim(), set_ylim(), etc..\n\n\nLegneds\n\nFirst add label option to each piece when plotting, and then add ax.legends() or plt.legends() at the end to display the legends.\nYou may use handles, labels = ax.get_legend_handles_labels() to get the handles and labels of the legends, and modify them if necessary.\n\n\n\n\nExample 5.11 \nimport numpy as np\nfig, ax = plt.subplots(1, 1)\nax.plot(np.random.randn(1000).cumsum(), 'k', label='one')\nax.plot(np.random.randn(1000).cumsum(), 'r--', label='two')\nax.plot(np.random.randn(1000).cumsum(), 'b.', label='three')\n\nax.set_title('Example')\nax.set_xlabel('x')\nax.set_ylabel('y')\n\nax.set_yticks([-40, 0, 40])\nax.set_yticklabels(['good', 'bad', 'ugly'])\n\nax.legend(loc='best')\n\n<matplotlib.legend.Legend at 0x218340084c0>\n\n\n\n\n\n\n\n\n5.1.6 Annotations\n\nThe command to add simple annotations is ax.text(). The required auguments are the coordinates of the text and the text itself. You may add several options to modify the style.\nIf arrows are needed, we may use ax.annotation(). Here an arrow will be shown from xytext to xy. The style of the arrow is controlled by the option arrowprops.\n\n\n\nExample 5.12 \nfig, ax = plt.subplots(figsize=(5, 5))\nax.plot(np.random.randn(1000).cumsum(), 'k', label='one')\nax.text(500, 0, 'Hello world!', family='monospace', fontsize=15, c='r')\nax.annotate('test', xy=(400, 0), xytext=(400, -10), c='r',\n            arrowprops={'facecolor': 'black',\n                        'shrink': 0.05})\n\nText(400, -10, 'test')\n\n\n\n\n\n\n\n\n5.1.7 Example\n\nExample 5.13 The stock data can be downloaded from here.\n\nfrom datetime import datetime\nfig, ax = plt.subplots()\ndata = pd.read_csv('assests/datasets/spx.csv', index_col=0, parse_dates=True)\nspx = data['SPX']\nspx.plot(ax=ax, style='k-')\ncrisis_data = [(datetime(2007, 10, 11), 'Peak of bull market'),\n               (datetime(2008, 3, 12), 'Bear Stearns Fails'),\n               (datetime(2008, 9, 15), 'Lehman Bankruptcy')]\nfor date, label in crisis_data:\n    ax.annotate(label, xy=(date, spx.asof(date) + 75),\n                xytext=(date, spx.asof(date) + 225),\n                arrowprops=dict(facecolor='black', headwidth=4, width=2,\n                                headlength=4),\n                horizontalalignment='left', verticalalignment='top')\nax.set_xlim(['1/1/2007', '1/1/2011'])\nax.set_ylim([600, 1800])\n_ = ax.set_title('Important dates in the 2008-2009 financial crisis')\n\n\n\n\n\n\nExample 5.14 Here is an example of arrows with different shapes. For more details please read the official document.\n\nfig, ax = plt.subplots()\n\nx = np.linspace(0, 20, 1000)\nax.plot(x, np.cos(x))\nax.axis('equal')\n\nax.annotate('local maximum', xy=(6.28, 1), xytext=(10, 4),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\nax.annotate('local minimum', xy=(5 * np.pi, -1), xytext=(2, -6),\n            arrowprops=dict(arrowstyle=\"->\",\n                            connectionstyle=\"angle3,angleA=0,angleB=-90\",\n                            color='r'))\n\nText(2, -6, 'local minimum')"
  },
  {
    "objectID": "contents/5/05-.html#seaborn",
    "href": "contents/5/05-.html#seaborn",
    "title": "5  Visualization",
    "section": "5.2 seaborn",
    "text": "5.2 seaborn\nThere are some new libraries built upon matplotlib, and seaborn is one of them. seaborn is for statistical graphics.\nseaborn is used imported in the following way.\n\nimport seaborn as sns\n\nseaborn also modifies the default matplotlib color schemes and plot styles to improve readability and aesthetics. Even if you do not use the seaborn API, you may prefer to import seaborn as a simple way to improve the visual aesthetics of general matplotlib plots.\nTo apply sns theme, run the following code.\n\nsns.set_theme()\n\nLet us directly run a few codes from the last section and compare the differences between them.\n\n\nExample 5.15 \nplt.plot(np.random.randn(30).cumsum(), color='r', linestyle='--', marker='o')\n\n\n\n\nPlease compare the output of the same code with the previous example\n\n\n5.2.1 Scatter plots with relplot()\nThe basic scatter plot method is scatterplot(). It is wrapped in relplot() as the default plotting method. So here we will mainly talk about relplot(). It is named that way because it is designed to visualize many different statistical relationships.\nThe idea of relplot() is to display points based on the variables x and y you choose, and assign different properties to alter the apperance of the points.\n\ncol will create multiple plots based on the column you choose.\nhue is for color encoding, based on the column you choose.\nsize will change the marker area, based on the column you choose.\nstyle will change the marker symbol, based on the column you choose.\n\n\nExample 5.16 Consider the following example. tips is a DataFrame, which is shown below.\n\nimport seaborn as sns\ntips = sns.load_dataset(\"tips\")\ntips\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      239\n      29.03\n      5.92\n      Male\n      No\n      Sat\n      Dinner\n      3\n    \n    \n      240\n      27.18\n      2.00\n      Female\n      Yes\n      Sat\n      Dinner\n      2\n    \n    \n      241\n      22.67\n      2.00\n      Male\n      Yes\n      Sat\n      Dinner\n      2\n    \n    \n      242\n      17.82\n      1.75\n      Male\n      No\n      Sat\n      Dinner\n      2\n    \n    \n      243\n      18.78\n      3.00\n      Female\n      No\n      Thur\n      Dinner\n      2\n    \n  \n\n244 rows × 7 columns\n\n\n\n\nsns.relplot(data=tips,\n            x=\"total_bill\", y=\"tip\", col=\"time\",\n            hue=\"smoker\", style=\"smoker\", size=\"size\")\n\n<seaborn.axisgrid.FacetGrid at 0x21837507a60>\n\n\n\n\n\n\nThe default type of plots for relplot() is scatter plots. However you may change it to line plot by setting kind='line'.\n\n\nExample 5.17 \ndots = sns.load_dataset(\"dots\")\nsns.relplot(data=dots, kind=\"line\",\n            x=\"time\", y=\"firing_rate\", col=\"align\",\n            hue=\"choice\", size=\"coherence\", style=\"choice\",\n            facet_kws=dict(sharex=False))\n\n<seaborn.axisgrid.FacetGrid at 0x218377b8550>\n\n\n\n\n\n\n\n\n5.2.2 regplot()\nThis method is a combination between scatter plots and linear regression.\n\nExample 5.18 We still use tips as an example.\n\nsns.regplot(x='total_bill', y='tip', data=tips)\n\n<AxesSubplot:xlabel='total_bill', ylabel='tip'>\n\n\n\n\n\n\n\n\n5.2.3 pairplot()\nThis is a way to display the pairwise relations among several variables.\n\nExample 5.19 The following code shows the pairplots among all numeric data in tips.\n\nsns.pairplot(tips, diag_kind='kde', plot_kws={'alpha': 0.2})\n\n<seaborn.axisgrid.PairGrid at 0x21837398790>\n\n\n\n\n\n\n\n\n5.2.4 barplot\n\n\nExample 5.20 \nsns.barplot(x='total_bill', y='day', data=tips, orient='h')\n\n<AxesSubplot:xlabel='total_bill', ylabel='day'>\n\n\n\n\n\nIn the plot, there are several total_bill during each day. The value in the plot is the average of total_bill in each day, and the black line stands for the 95% confidence interval.\n\nsns.barplot(x='total_bill', y='day', hue='time', data=tips, orient='h')\n\n<AxesSubplot:xlabel='total_bill', ylabel='day'>\n\n\n\n\n\nIn this plot, lunch and dinner are distinguished by colors.\n\n\n\n5.2.5 Histogram\n\n\nExample 5.21 \nmu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\ny = mu-30 + sigma*2 * np.random.randn(10000)\ndf = pd.DataFrame(np.array([x,y]).T)\nsns.histplot(df, bins=100, kde=True)\n\n<AxesSubplot:ylabel='Count'>\n\n\n\n\n\nPlease compare this plot with this Example"
  },
  {
    "objectID": "contents/5/05-.html#examples",
    "href": "contents/5/05-.html#examples",
    "title": "5  Visualization",
    "section": "5.3 Examples",
    "text": "5.3 Examples\n\n5.3.1 Example 1: USA.gov Data From Bitly\nIn 2011, URL shortening service Bitly partnered with the US government website USA.gov to provide a feed of anonymous data gathered from users who shorten links ending with .gov or .mil. The data is gotten from [1].\nThe data file can be downloaded from here. The file is mostly in JSON. It can be converted into a DataFrame by the following code.\n\nimport pandas as pd\nimport numpy as np\nimport json\npath = 'assests/datasets/example.txt'\ndf = pd.DataFrame([json.loads(line) for line in open(path)])\n\nWe mainly use tz and a columns. So let us clean it.\n\ndf['tz'] = df['tz'].fillna('Missing')\ndf['tz'][df['tz'] == ''] = 'Unknown'\ndf['a'] = df['a'].fillna('Missing')\ndf['a'][df['a'] == ''] = 'Unknown'\n\nWe first want to extract the timezone infomation from it. The timezone info is in the column tz.\n\ntzone = df['tz']\ntvc = tzone.value_counts()\ntvc\n\nAmerica/New_York        1251\nUnknown                  521\nAmerica/Chicago          400\nAmerica/Los_Angeles      382\nAmerica/Denver           191\n                        ... \nEurope/Uzhgorod            1\nAustralia/Queensland       1\nEurope/Sofia               1\nAmerica/Costa_Rica         1\nAmerica/Tegucigalpa        1\nName: tz, Length: 98, dtype: int64\n\n\nAfter cleaning data, we would like to visulize the value counts.\n\nimport seaborn as sns\nsns.barplot(x=tvc[:10].values, y=tvc[:10].index)\n\n<AxesSubplot:>\n\n\n\n\n\nWe then would like to extract information from the column a. This column is about the agent of the connection. The important info is the part before the space ' '.\n\nagent = df['a']\nagent = agent.str.split(' ').str[0]\navc = agent.value_counts()\navc[:10]\n\nMozilla/5.0                 2594\nMozilla/4.0                  601\nGoogleMaps/RochesterNY       121\nMissing                      120\nOpera/9.80                    34\nTEST_INTERNET_AGENT           24\nGoogleProducer                21\nMozilla/6.0                    5\nBlackBerry8520/5.0.0.681       4\nBlackBerry8520/5.0.0.592       3\nName: a, dtype: int64\n\n\nNow let us assume that, if Windows appears in column a the user is using Windows os, if not then not. In this case, the os can be detected by the following code.\n\ndf['os'] = np.where(df['a'].str.contains('Windows'), 'Windows', 'Not Windows')\n\nNow we can make a bar plot about the counts based on os and timezone.\n\ntz_os_counts = df.groupby(['tz', 'os']).size().unstack().fillna(0)\ntz_os_counts.head()\n\n\n\n\n\n  \n    \n      os\n      Not Windows\n      Windows\n    \n    \n      tz\n      \n      \n    \n  \n  \n    \n      Africa/Cairo\n      0.0\n      3.0\n    \n    \n      Africa/Casablanca\n      0.0\n      1.0\n    \n    \n      Africa/Ceuta\n      0.0\n      2.0\n    \n    \n      Africa/Johannesburg\n      0.0\n      1.0\n    \n    \n      Africa/Lusaka\n      0.0\n      1.0\n    \n  \n\n\n\n\nWe then turn it into a DataFrame using the .stack(), .unstack() tricks.\n\ntovc = tz_os_counts.stack()[tz_os_counts.sum(axis=1).nlargest(10).index]\ntovc.name = 'count'\ndftovc = pd.DataFrame(tovc).reset_index()\n\nFinally we may draw the bar plot.\n\nsns.barplot(x='count', y='tz', hue='os', data=dftovc)\n\n<AxesSubplot:xlabel='count', ylabel='tz'>\n\n\n\n\n\n\n\n5.3.2 Example 2: US Baby Names 1880–2010\nThe United States Social Security Administration (SSA) has made available data on the frequency of baby names from 1880 through the present. Hadley Wickham, an author of several popular R packages, has often made use of this dataset in illustrating data manipulation in R. The dataset can be downloaded from here as a zip file. Please unzip it and put it in your working folder.\nIn the folder there are 131 .txt files. The naming scheme is yob + the year. Each file contains 3 columns: name, gender, and counts. We would like to add a column year, and combine all files into a single DataFrame. In our example, the year is from 1880 to 2010.\n\nimport pandas as pd\n\npath = 'assests/datasets/babynames/'\ndflist = list()\nfor year in range(1880, 2011):\n    filename = path + 'yob' + str(year) + '.txt'\n    df = pd.read_csv(filename, names=['name', 'gender', 'counts'])\n    df['year'] = year\n    dflist.append(df)\ndf = pd.concat(dflist, ignore_index=True)\n\nWe can plot the total births by sex and year.\n\nimport seaborn as sns\n\nsns.relplot(data=df.groupby(['gender', 'year']).sum().reset_index(),\n            x='year', y='counts', hue='gender', kind='line')\n\n\n\n<seaborn.axisgrid.FacetGrid at 0x2183ae87160>\n\n\n\n\n\nFor further analysis, we would like to compute the proportions of each name relative to the total number of births per year per gender.\n\ndef add_prop(group):\n    group['prop'] = group.counts / group.counts.sum()\n    return group\n\ndf = df.groupby(['gender', 'year']).apply(add_prop)\ndf.head()\n\n\n\n\n\n\n\n  \n    \n      \n      name\n      gender\n      counts\n      year\n      prop\n    \n  \n  \n    \n      0\n      Mary\n      F\n      7065\n      1880\n      0.077643\n    \n    \n      1\n      Anna\n      F\n      2604\n      1880\n      0.028618\n    \n    \n      2\n      Emma\n      F\n      2003\n      1880\n      0.022013\n    \n    \n      3\n      Elizabeth\n      F\n      1939\n      1880\n      0.021309\n    \n    \n      4\n      Minnie\n      F\n      1746\n      1880\n      0.019188\n    \n  \n\n\n\n\nNow we would like to keep the first 100 names in each year, and save it as a new DataFrame top100.\n\ntop100 = (\n    df.groupby(['year', 'gender'])\n    .apply(lambda x: df.loc[x['counts'].nlargest(100).index])\n    .drop(columns=['year', 'gender'])\n    .reset_index()\n    .drop(columns='level_2')\n)\ntop100.head()\n\n\n\n\n\n\n\n  \n    \n      \n      year\n      gender\n      name\n      counts\n      prop\n    \n  \n  \n    \n      0\n      1880\n      F\n      Mary\n      7065\n      0.077643\n    \n    \n      1\n      1880\n      F\n      Anna\n      2604\n      0.028618\n    \n    \n      2\n      1880\n      F\n      Emma\n      2003\n      0.022013\n    \n    \n      3\n      1880\n      F\n      Elizabeth\n      1939\n      0.021309\n    \n    \n      4\n      1880\n      F\n      Minnie\n      1746\n      0.019188\n    \n  \n\n\n\n\nNote that level_2 is related to the original index after reset_index(). That’s why we don’t need it here.\nNow we would like to draw the trend of some names.\n\nnamelist = ['John', 'Harry', 'Mary']\nsns.relplot(data=top100[top100['name'].isin(namelist)],\n            x='year', y='counts', hue='name', kind='line')\n\n\n\n<seaborn.axisgrid.FacetGrid at 0x218390be160>\n\n\n\n\n\nNow we would like to analyze the ending of names.\n\ndf['ending'] = df['name'].str[-1]\nendingcount = df.groupby(['gender', 'year', 'ending']).sum().reset_index()\n\nWe would like to draw barplots to show the distributions in year 1910, 1960 and 2010.\n\ncertainyear = endingcount[endingcount['year'].isin([1910, 1960, 2010])]\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(2, 1, figsize=(10,7))\nsns.barplot(data=certainyear[endingcount['gender']=='M'],\n            x='ending', y='prop', hue='year', ax=axs[0])\nsns.barplot(data=certainyear[endingcount['gender']=='F'],\n            x='ending', y='prop', hue='year', ax=axs[1]).legend_.remove()\n\n\n\n\n\n\nWe would also like to draw the line plot to show the trending of certain letters through years.\n\nsns.relplot(data=endingcount[endingcount.ending.isin(['d', 'n', 'y'])],\n            x='year', y='prop', hue='ending', kind='line')\n\n\n\n<seaborn.axisgrid.FacetGrid at 0x2183adfa070>"
  },
  {
    "objectID": "contents/5/05-.html#exercises",
    "href": "contents/5/05-.html#exercises",
    "title": "5  Visualization",
    "section": "5.4 Exercises",
    "text": "5.4 Exercises\n\nExercise 5.1 Please download the mtcars file from here and read it as a DataFrame. Then create a scatter plot of the drat and wt variables from mtcars and color the dots by the carb variable.\n\n\nExercise 5.2 Please consider the baby name dataset. Please draw the trends of counts of names ending in a, e, n across years for each gender."
  },
  {
    "objectID": "contents/5/05-.html#projects",
    "href": "contents/5/05-.html#projects",
    "title": "5  Visualization",
    "section": "5.5 Projects",
    "text": "5.5 Projects\n\nExercise 5.3 Please read the file as a DataFrame from here. This is the Dining satisfaction with quick service restaurants questionare data provided by Dr. Siri McDowall, supported by DART SEED grant.\n\nPlease pick out all rating columns. Excluding last.visit, visit.again and recommend, compute the mean of the rest and add it to the DataFrame as a new column.\nUse a plot to show the relations among these four columns: last.visit, visit.again, recommend and mean.\nLook at the column Profession. Keep Student, and change everything else to be Professional, and add it as a new column Status to the DataFrame.\nDraw the histogram of mean with respect to Status.\nFind the counts of each recommend rating for each Status and draw the barplot. Do the same to last.visit/Status and visit.again/Status.\nExploer the dataset and draw one plot.\n\n\n\nExercise 5.4 Please use the baby name dataset. We would like to consider the diversity of the names. Please compute the number of popular names in top 50% for each year each gender. Draw a line plot to show the trend and discuss the result.\n\n\n\n\n\n[1] McKinney, W. (2017). Python for data analysis: Data wrangling with pandas, NumPy, and IPython. O’Reilly Media."
  },
  {
    "objectID": "contents/7/07-.html",
    "href": "contents/7/07-.html",
    "title": "7  R Fundamentals",
    "section": "",
    "text": "[1]\nA few advantages about R:"
  },
  {
    "objectID": "contents/7/07-.html#hello-world-for-r",
    "href": "contents/7/07-.html#hello-world-for-r",
    "title": "7  R Fundamentals",
    "section": "7.1 Hello world for R",
    "text": "7.1 Hello world for R\n\nprint('Hello world!')\n\n[1] \"Hello world!\""
  },
  {
    "objectID": "contents/7/07-.html#essential-concepts",
    "href": "contents/7/07-.html#essential-concepts",
    "title": "7  R Fundamentals",
    "section": "7.2 Essential concepts",
    "text": "7.2 Essential concepts\n\nIn R, assignments is <-, not =. = actually works, but it may cause confusions. So it is always recommended to use <-. The R Studio keybinding for <- is alt+-.\n. is NOT a special character in R, and can be used in variable names. So is.na() simply means a function called is.na. It is not a function na in a package is as in Python.\nIn R, the block is defined by {}. Indentation is not that important.\nR has a better package management system than Python, and therefore in most cases you don’t need virtual environment for R.\n\n\n7.2.1 R Markdown / Quarto\nThe counterpart of Jupyter notebook in R is .rmd/.qmd file. Similar to a notebook, in a R Markdown / Quarto file, there is a so-called code block that can run the codes inside to produce documents with both texts and codes and codes outputs.\nIn the following two sections about R, you are supposed to submit .rmd/.qmd file.\n\n\n\n\n\n\nNote\n\n\n\nQuarto is an extension/continuation of R Markdown. Most R Markdown file can be directly translated to a Quarto file without many modifications. The main difference between R Markdown and Quarto is that Quarto has better support for other languages such as Python and Julia. You may go to its homepage for more details.\nThis note is produced by Quarto.\n\n\nThe most import part of R Markdown / Quarto is the code block, that is\nprint('Hello world!')\nIn Quarto, you may also write\nprint('Hello world!')\nThere are many options to adjust how the code blocks are excacuted. You don’t need to worry about them right now. Currently just try to write your report together with code blocks.\n\n\n7.2.2 Development tools\n\n7.2.2.1 R Studio\nFor R, the almost definite choice of IDE is R Studio. You may download and install it from the homepage.\nNote that R Studio will soon be renamed to posit. Please keep an eye on it if it will make any differences.\n\n\n7.2.2.2 Google Colab\nYou may use R in Google Colab. The link is colab.to/r. After you open the notebook, you may go to Edit->Notebook settings to change Runtime type to be R.\nThe rest is similar to Jupyter notebook, while the codes are now R codes.\n\n\n7.2.2.3 Kaggle notebook\nActually there are a lot of online notebook services that you can use. Kaggle is another good choice. It is a little bit better than Google Colab since its R choice is explicitly listed in the settings: File->Language."
  },
  {
    "objectID": "contents/7/07-.html#r-basics",
    "href": "contents/7/07-.html#r-basics",
    "title": "7  R Fundamentals",
    "section": "7.3 R Basics",
    "text": "7.3 R Basics\nMain reference here is [2] and [1].\n\n7.3.1 Data structures\n\n7.3.1.1 Vectors\nVector is one of the basic data structure in R. It is created by c() function. You may store any data types in it. The data type inside a vector can be checked by typeof function.\n\ndie <- c(1, 2, 3, 4, 5, 6)\ntypeof(die)\n\n[1] \"double\"\n\n\nFor consecutive numbers, an easier way to create vector is to use :.\n\ndie <- 1:6\n\n\n\n\n\n\n\nNote\n\n\n\nNote that vector index starts from 1 in R, while list index starts from 0 in Python.\n\n\n\ndie[1]\n\n[1] 1\n\n\nWhen slicing with vectors, don’t forget to use c().\n\ndie[c(2, 3)]\n\n[1] 2 3\n\n\n\ndie[2:3]\n\n[1] 2 3\n\n\nYou may use length() function to get its length.\n\nlength(die)\n\n[1] 6\n\n\n\n\n7.3.1.2 Attributes\nR objects may have attributes. Attributes won’t be shown by default when you show the object. You may find the attributes of a R object by calling the attributes() function.\nThe following example show that the vector die defined in Section 7.3.1.1 doesn’t have attributes.\n\nattributes(die)\n\nNULL\n\n\nThe most common attributes of R objects are names. We could manually input the attributes.\n\nnames(die) <- c('one', 'two', 'three', 'four', 'five', 'six')\ndie\n\n  one   two three  four  five   six \n    1     2     3     4     5     6 \n\n\nAfter the assignment, each value is assigned a name. Now die has an attribute names. It is still a vector despite the fact that it now has names.\n\nattributes(die)\n\n$names\n[1] \"one\"   \"two\"   \"three\" \"four\"  \"five\"  \"six\"  \n\nnames(die)\n\n[1] \"one\"   \"two\"   \"three\" \"four\"  \"five\"  \"six\"  \n\nis.vector(die)\n\n[1] TRUE\n\n\n\n\n7.3.1.3 matrices\n\nm <- matrix(c(1,2,3,4,5,6), nrow=2)\nm[1, ]\n\n[1] 1 3 5\n\n\nA matrix has dim attribute.\n\ndim(m)\n\n[1] 2 3\n\n\nNote that by assigning and removing dim attribute, you may change the object between vectors and matrices.\n\n\nExample 7.1 \nm\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\nis.matrix(m)\n\n[1] TRUE\n\nis.vector(m)\n\n[1] FALSE\n\ndim(m)\n\n[1] 2 3\n\ndim(m) <- NULL\nm\n\n[1] 1 2 3 4 5 6\n\nis.matrix(m)\n\n[1] FALSE\n\nis.vector(m)\n\n[1] TRUE\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe dim of a matrix/vector can be a length 3 vector. In this case, it will become an array. For simplicity we won’t talk about array here.\n\n\n\n\n7.3.1.4 Lists\nList is very similar to a vector. The main difference is that vector can only store values, while list can store objects. The most typical example of objects is another vector. Please see the following example.\n\n\nExample 7.2 \nc(1:2, 3:4)\n\n[1] 1 2 3 4\n\nlist(1:2, 3:4)\n\n[[1]]\n[1] 1 2\n\n[[2]]\n[1] 3 4\n\n\n\n\n\n7.3.1.5 data.frame\nData Frame is a 2d version of a list. You may think about it in terms of tables.\n\ndf <- data.frame(face = c(\"ace\", \"two\", \"six\"),\n                 suit = c(\"clubs\", \"clubs\", \"clubs\"),\n                 value = c(1, 2, 3))\ndf\n\n  face  suit value\n1  ace clubs     1\n2  two clubs     2\n3  six clubs     3\n\n\n\n\n7.3.1.6 Examples\n\nExample 7.3 Consider a date.frame representing a deck of cards. Here we use expand.grid() to perform the Cartesian product.\n\nsuit <- c('spades', 'hearts', 'clubs', 'diamonds')\nface <- 1:13\ndeck <- expand.grid(suit, face)\nhead(deck)\n\n      Var1 Var2\n1   spades    1\n2   hearts    1\n3    clubs    1\n4 diamonds    1\n5   spades    2\n6   hearts    2\n\n\nWe may assign names to change the column names.\n\nnames(deck) <- c('suit', 'face')\nhead(deck)\n\n      suit face\n1   spades    1\n2   hearts    1\n3    clubs    1\n4 diamonds    1\n5   spades    2\n6   hearts    2\n\n\nNote that since suit and face are two vectors, merge() can also do the Cartesian product. expand.grid() is good for both vectors and data.frame.\n\nmerge(suit, face)\n\n          x  y\n1    spades  1\n2    hearts  1\n3     clubs  1\n4  diamonds  1\n5    spades  2\n6    hearts  2\n7     clubs  2\n8  diamonds  2\n9    spades  3\n10   hearts  3\n11    clubs  3\n12 diamonds  3\n13   spades  4\n14   hearts  4\n15    clubs  4\n16 diamonds  4\n17   spades  5\n18   hearts  5\n19    clubs  5\n20 diamonds  5\n21   spades  6\n22   hearts  6\n23    clubs  6\n24 diamonds  6\n25   spades  7\n26   hearts  7\n27    clubs  7\n28 diamonds  7\n29   spades  8\n30   hearts  8\n31    clubs  8\n32 diamonds  8\n33   spades  9\n34   hearts  9\n35    clubs  9\n36 diamonds  9\n37   spades 10\n38   hearts 10\n39    clubs 10\n40 diamonds 10\n41   spades 11\n42   hearts 11\n43    clubs 11\n44 diamonds 11\n45   spades 12\n46   hearts 12\n47    clubs 12\n48 diamonds 12\n49   spades 13\n50   hearts 13\n51    clubs 13\n52 diamonds 13\n\n\n\n\n\n\n7.3.2 Load data\n\n7.3.2.1 build-in datasets\nR has many build-in datasets. You may use data() to see all of them. Here are a few common datasets.\n\nmtcars: Motor Trend Car Road Tests: The data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models)\n\n\ndata(mtcars)\n\n\niris: iris data set gives the measurements in centimeters of the variables sepal length, sepal width, petal length and petal width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica.\n\n\ndata(iris)\n\n\nToothGrowth: ToothGrowth data set contains the result from an experiment studying the effect of vitamin C on tooth growth in 60 Guinea pigs.\n\n\ndata(ToothGrowth)\n\n\nPlantGrowth: Results obtained from an experiment to compare yields (as measured by dried weight of plants) obtained under a control and two different treatment condition.\n\n\ndata(PlantGrowth)\n\n\nUSArrests: This data set contains statistics about violent crime rates by us state.\n\n\ndata(USArrests)\n\n\n\n7.3.2.2 Read from files\nThe build-in read.csv() function can directly read .csv file into a data.frame.\n\nExample 7.4 We use the file yob1880.txt from Chapter 5 here. Put the file in the working folder and run the following code.\n\ndf <- read.csv('yob1880.txt', header = FALSE)\nhead(df)\n\n\n\n\nWe may also manually assign columns names.\n\nnames(df) <- c('name', 'sex', 'counts')\nhead(df)\n\n       name sex counts\n1      Mary   F   7065\n2      Anna   F   2604\n3      Emma   F   2003\n4 Elizabeth   F   1939\n5    Minnie   F   1746\n6  Margaret   F   1578\n\n\n\n\n\n\n7.3.3 Flow control\n\n7.3.3.1 for loop\n\n\nExample 7.5 \nfor (x in 1:10){\n    print(x)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n\n\n\n\n\n7.3.3.2 if-else\n\n\nExample 7.6 \na <- 200\nb <- 33\n\nif (b > a) {\n  print(\"b is greater than a\")\n} else if (a == b) {\n  print(\"a and b are equal\")\n} else {\n  print(\"a is greater than b\")\n}\n\n[1] \"a is greater than b\"\n\n\n\n\n\n7.3.3.3 Functions\n\n\nExample 7.7 \nmyfunction <- function() {\n    die <- 1:6\n    sum(die)\n}\n\nmyfunction()\n\n[1] 21"
  },
  {
    "objectID": "contents/7/07-.html#exercises",
    "href": "contents/7/07-.html#exercises",
    "title": "7  R Fundamentals",
    "section": "7.4 Exercises",
    "text": "7.4 Exercises"
  },
  {
    "objectID": "contents/7/07-.html#projects",
    "href": "contents/7/07-.html#projects",
    "title": "7  R Fundamentals",
    "section": "7.5 Projects",
    "text": "7.5 Projects\n\nExercise 7.1 Start a R Markdown / Quarto file. In the first section write a R code block to print Hello world!.\n\n\n\n\n\n[1] Wickham, H. and Grolemund, G. (2017). R for data science: Import, tidy, transform, visualize, and model data. O’Reilly Media.\n\n\n[2] Grolemund, G. (2014). Hands-on programming with r: Write your own functions and simulations. O’Reilly Media."
  },
  {
    "objectID": "contents/references.html",
    "href": "contents/references.html",
    "title": "References",
    "section": "",
    "text": "[1] Klosterman, S.\n(2021). Data\nscience projects with python: A case study approach to gaining valuable\ninsights from real data with machine learning. Packt\nPublishing, Limited.\n\n\n[2] McKinney, W.\n(2017). Python for data analysis: Data wrangling with pandas, NumPy,\nand IPython. O’Reilly Media.\n\n\n[3] Shaw, Z. A.\n(2017). Learn\npython 3 the hard way. Addison Wesley.\n\n\n[4] Sweigart, A.\n(2020). Automate the\nboring stuff with python, 2nd edition practical programming for total\nbeginners: Practical programming for total beginners. No Starch\nPress.\n\n\n[5] Prabhakaran, S.\n(2018). 101\nNumPy exercises for data analysis (python).\n\n\n[6] Grolemund, G.\n(2014). Hands-on programming with r: Write your own functions and\nsimulations. O’Reilly Media.\n\n\n[7] Prabhakaran, S.\n(2018). 101\npandas exercises for data analysis.\n\n\n[8] Beuzen, T. and\nTimbers, T. (2022). Python\npackages. Taylor & Francis Group.\n\n\n[9] Wickham, H. and\nGrolemund, G. (2017). R for data science: Import, tidy,\ntransform, visualize, and model data. O’Reilly Media.\n\n\n[10] Youens-Clark, K.\n(2020). Tiny python\nprojects. Manning Publications."
  },
  {
    "objectID": "contents/app/setup.html",
    "href": "contents/app/setup.html",
    "title": "Appendix A — Setup",
    "section": "",
    "text": "Note that all the following steps are tested in Windows 10/11. If you use other operation systems please contact me.\n\nGo to Anaconda download page. Download and install Anaconda.\nGo to VS Code download page. Download and install VS Code. Actually Anaconda contains one copy of VS Code. Here I just assume that some of you intall VS Code before Anaconda.\nWhen installing VS Code, you may accept all default settings. When installing Anaconda, please pay attention to the PATH setting.\n\n\n\n\n\n\nThe first box is unchecked by default. This setting is related to the ability to easily run Python code in Terminals. I recommend you to check it. If you don’t check it during this step, you may add it to the system environment variable PATH manually later.\n\nThe UI of VS Code looks as follows.\n\n\n\n\n\n\nPlease look at the fifth tab from the left sidebar. It is the Extension tab.\n\n\n\n\n\nPlease search for python and install the first Python extension from Microsoft. It will actually install five extensions. These are all we need for now.\n\nAfter all are installed, go to the first Explorer tab on the left side bar, and Open Folder. This is the working directory for your project.\n\n\n\n\n\n\nChoose one folder and start a new .py file.\n\n\n\n\n\n\nIf everything is setup correctly, you may see the Python version and environment name at the right lower corner. In our case the environment name is base. We will need it in the future.\n\n\n\n\n\n\nNote that we are not looking at the Python for Language Mode. If you see Select Interpreter there, it means that VS Code doesn’t find your Python interpreter. Please restart VS Code or select it manually, or check whether Anaconda is installed correctly.\n\n\n\n\n\nTo check whether everything is setup correctly, please run the following tests.\n\nUse ctrl+shift+p to open the Command Palette, type “Jupyter: Create Interactive Window” and press enter to open the Jupyter interactive window.\n\n\n\n\n\n\nIf the interactive window starts and you see the loading infomation of your kernel as follows, especially you see the environment name on the right upper corner, then you get everything correctly. However we will still do more tests.\n\n\n\n\n\n\nIn the window type import numpy as np to test whether you are able to import packages. If you don’t see any error messages then it means good.\n\n\n\n\n\n\n\nIn the editor window, type import numpy as np and right click the body to choose Run Current File in Interactive Window, and see whether it runs in interactive window.\n\n\n\n\n\n\n\nOpen the terminal. Please use Command Prompt instead of Powershell. Activate the conda environment by type the command conda activate base in the example above. Please change the name to match your own environment. If conda cannot be recognized, please register Python and Anaconda to the system environment path. Please see the next Appendix for details."
  },
  {
    "objectID": "contents/app/setup.html#sec-googlecolab",
    "href": "contents/app/setup.html#sec-googlecolab",
    "title": "Appendix A — Setup",
    "section": "A.2 Google Colab",
    "text": "A.2 Google Colab\nGoogle Colab is a product from Google Research, that allows anybody to write and execute arbitrary Python code through the browser, and is especially well suited to machine learning, data analysis and education.\nHere is the link to Google Colab. To use it you should have a Google account. Otherwise it is very simple to start, since a lot of packages for our course are already installed.\n\nA.2.1 Install packages\nIf you would like to install more packages, you can type %pip install + package name in a code cell and execute it.\nThe drawback here is that Google Colab can only stay for 24 hours. After that, all additionaly installed packages will be earsed. However you can put %pip install + package name at the beginning of your notebook and these packages will be installed every time you run the notebook.\n\n\nA.2.2 Upload files\nYou may directly upload files to the working directory of Google Colab. This has to be done in the browser. When working with these files, you may just use relative paths.\nThe drawback here is that Google Colab can only stay for 24 hours. After that, although your .ipynb files will be stores, all other files will be earsed.\n\n\nA.2.3 Mount Google Drive\nOne way to let the uploaded files stay in cloud is to upload them to Google Drive, and then load your Google Drive contents from Google Colab.\nGoole Drive is a cloud storage service provided by Google. When you register a Google account you will be automatically assigned a Google Drive account. You may get access to it from this link.\nHere are the steps to mount Google Drive:\n\nUpload your files to your Google Drive.\nRun the following codes in Colab code cells before you are loading the uploaded files:\n\n\nfrom google.colab import drive\ndrive.mount('/content/gdrive')\n\n\nA window pop up asking you about the permission. Authorize and the drive is mounted.\nTo work in directories, the most popular commands are\n\n%ls: list all files and folders in the working directory.\n%cd + folder name: Get into a specific folder.\n%cd..: Get into the parent folder. Then use these commands to find the files your just uploaded.\n\nFinally you may directly get access to those files just like they are in the working directory."
  },
  {
    "objectID": "contents/app/path.html",
    "href": "contents/app/path.html",
    "title": "Appendix B — PATH",
    "section": "",
    "text": "First in the start menu search for Edit the system environment variables.\n\n\n\n\n\n\n\nThen click the Environment Variables... button at the right lower corner.\n\n\n\n\n\n\n\nFind the Path variable in either the upper window or the lower window. Use which one depends on whether you want to register the variable for the user or for the machine. In this example I add for the user.\n\n\n\n\n\n\n\nFinally double click the variable and add the following path to it. You need to make changes according to your installation. I recommend you to locate your Anaconda installation first to get the path."
  }
]