[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python/R for Data Science",
    "section": "",
    "text": "This is the lecture notes for STAT 2304 Programming languages for Data Science 2022 Fall at ATU. If you have any comments/suggetions/concers about the notes please contact me at my email xxiao@atu.edu."
  },
  {
    "objectID": "contents/1/01-.html#hello-world",
    "href": "contents/1/01-.html#hello-world",
    "title": "1  Preliminaries",
    "section": "1.2 Hello world!",
    "text": "1.2 Hello world!\nWe will mainly focus on this code editor mode at the beginning and check our results or do some simple computations in the console.\nNotebook is another very popular mode to use Python. We will talk about it later.\n\n1.2.1 Set up Python environment using IDEs\nPlease follow the following steps to run your first line of Python codes.\nWe will talk about the relation between Python and Anaconda and more about packages sometime later.\n\nGo to Anaconda download page. Download and install Anaconda.\nThere are several IDEs for Python bundled with Anaconda. Pick any one you like. I personally use VS Code. Here we use Spyder as an example for now since it doesn’t require any configurations.\nHere is a screenshot of Spyder 5.1.5. \nThe right lower window is the console. Type the following code, and run. If Hello world! is displayed, the Python environment is set up successfully. Now you can start to play with Python!\n\n\n\n1.2.2 Code editor\nThe left window is called Code Editor. You can write multiple lines of codes in the code editor and run them all together. The output results might appear in the console.\nAs shown in the screenshot, when press F5 to run file, the codes in the code editor will be excuted line by line.\nThe code in the example is\n\nprint('Hello world!')\nprint('Another line')\n# Everything after # are comments that won't be excuted.\n\nHello world!\nAnother line\n\n\n\n\n1.2.3 IPython and Jupyter\n\n\n\n1.2.4 Linters"
  },
  {
    "objectID": "contents/1/01-.html#projects",
    "href": "contents/1/01-.html#projects",
    "title": "1  Preliminaries",
    "section": "1.3 Projects",
    "text": "1.3 Projects\n\nExercise 1.1 (Hello world!) \nPlease set up a Python developing environment, including for .py file and for notebook, that will be used across the semester. Then print Hello World!.\n\n\nExercise 1.2 (Define a function and play with time) Please play with the following codes in a Jupyter notebook. We haven’t talked about any of them right now. Try to guess what they do and write your guess in markdown cells.\n\nimport time\n\ndef multistr(x, n=2):\n    return x * n\n\nt0 = time.time()\nx = 'Python'\nprint(multistr(x, n=10))\nt1 = time.time()\nprint(\"Time used: \", t1-t0)\n\n\n\nExercise 1.3 (Fancy Basketball plot) Here is an example of the data analysis. We pull data from a dataset, filter the data according to our needs and plot it to visualize the data. This is just a show case. You are encouraged to play the code, make tweaks and see what would happen. You don’t have to turn in anything.\nThe data we choose is Stephen Curry’s shots data in 2021-2022 regular season. First we need to load the data. The data is obtained from nba.com using nba_api.\n\nfrom nba_api.stats.static import players\nfrom nba_api.stats.endpoints import shotchartdetail\nplayer_dict = players.get_players()\n\nThe shots data we need is in shotchartdetail. However to use it we need to know the id of Stephen Curry using the dataset player_dict.\n\nfor player in player_dict:\n    if player['full_name'] == 'Stephen Curry':\n        print(player['id'])\n\n201939\n\n\nSo the id of Stephen Curry is 201939. Let’s pull out his shots data in 2021-2022 season.\n\nresults = shotchartdetail.ShotChartDetail(\n            team_id = 0,\n            player_id = 201939,\n            context_measure_simple = 'FGA',\n            season_nullable = '2021-22',\n            season_type_all_star = 'Regular Season')\ndf = results.get_data_frames()[0]\ndf.head()\n\n\n\n\n\n  \n    \n      \n      GRID_TYPE\n      GAME_ID\n      GAME_EVENT_ID\n      PLAYER_ID\n      PLAYER_NAME\n      TEAM_ID\n      TEAM_NAME\n      PERIOD\n      MINUTES_REMAINING\n      SECONDS_REMAINING\n      ...\n      SHOT_ZONE_AREA\n      SHOT_ZONE_RANGE\n      SHOT_DISTANCE\n      LOC_X\n      LOC_Y\n      SHOT_ATTEMPTED_FLAG\n      SHOT_MADE_FLAG\n      GAME_DATE\n      HTM\n      VTM\n    \n  \n  \n    \n      0\n      Shot Chart Detail\n      0022100002\n      26\n      201939\n      Stephen Curry\n      1610612744\n      Golden State Warriors\n      1\n      10\n      9\n      ...\n      Left Side Center(LC)\n      24+ ft.\n      28\n      -109\n      260\n      1\n      0\n      20211019\n      LAL\n      GSW\n    \n    \n      1\n      Shot Chart Detail\n      0022100002\n      34\n      201939\n      Stephen Curry\n      1610612744\n      Golden State Warriors\n      1\n      9\n      41\n      ...\n      Center(C)\n      24+ ft.\n      26\n      48\n      257\n      1\n      0\n      20211019\n      LAL\n      GSW\n    \n    \n      2\n      Shot Chart Detail\n      0022100002\n      37\n      201939\n      Stephen Curry\n      1610612744\n      Golden State Warriors\n      1\n      9\n      10\n      ...\n      Left Side Center(LC)\n      24+ ft.\n      25\n      -165\n      189\n      1\n      1\n      20211019\n      LAL\n      GSW\n    \n    \n      3\n      Shot Chart Detail\n      0022100002\n      75\n      201939\n      Stephen Curry\n      1610612744\n      Golden State Warriors\n      1\n      6\n      17\n      ...\n      Center(C)\n      Less Than 8 ft.\n      1\n      -13\n      12\n      1\n      0\n      20211019\n      LAL\n      GSW\n    \n    \n      4\n      Shot Chart Detail\n      0022100002\n      130\n      201939\n      Stephen Curry\n      1610612744\n      Golden State Warriors\n      1\n      3\n      11\n      ...\n      Center(C)\n      Less Than 8 ft.\n      2\n      -15\n      22\n      1\n      0\n      20211019\n      LAL\n      GSW\n    \n  \n\n5 rows × 24 columns\n\n\n\ndf is the results we get in terms of a DataFrame, and we show the first 5 records as an example.\nThese are all attempts. We are interested in all made. By looking at all the columns, we find a column called SHOT_MADE_FLAG which shows what we want. Therefore we will use it to filter the records.\n\ndf_made = df[df['SHOT_MADE_FLAG']==1]\ndf_made.head()\n\n\n\n\n\n  \n    \n      \n      GRID_TYPE\n      GAME_ID\n      GAME_EVENT_ID\n      PLAYER_ID\n      PLAYER_NAME\n      TEAM_ID\n      TEAM_NAME\n      PERIOD\n      MINUTES_REMAINING\n      SECONDS_REMAINING\n      ...\n      SHOT_ZONE_AREA\n      SHOT_ZONE_RANGE\n      SHOT_DISTANCE\n      LOC_X\n      LOC_Y\n      SHOT_ATTEMPTED_FLAG\n      SHOT_MADE_FLAG\n      GAME_DATE\n      HTM\n      VTM\n    \n  \n  \n    \n      2\n      Shot Chart Detail\n      0022100002\n      37\n      201939\n      Stephen Curry\n      1610612744\n      Golden State Warriors\n      1\n      9\n      10\n      ...\n      Left Side Center(LC)\n      24+ ft.\n      25\n      -165\n      189\n      1\n      1\n      20211019\n      LAL\n      GSW\n    \n    \n      6\n      Shot Chart Detail\n      0022100002\n      176\n      201939\n      Stephen Curry\n      1610612744\n      Golden State Warriors\n      1\n      0\n      27\n      ...\n      Center(C)\n      Less Than 8 ft.\n      2\n      -7\n      29\n      1\n      1\n      20211019\n      LAL\n      GSW\n    \n    \n      9\n      Shot Chart Detail\n      0022100002\n      352\n      201939\n      Stephen Curry\n      1610612744\n      Golden State Warriors\n      2\n      1\n      29\n      ...\n      Center(C)\n      Less Than 8 ft.\n      1\n      -1\n      10\n      1\n      1\n      20211019\n      LAL\n      GSW\n    \n    \n      16\n      Shot Chart Detail\n      0022100002\n      510\n      201939\n      Stephen Curry\n      1610612744\n      Golden State Warriors\n      3\n      2\n      23\n      ...\n      Center(C)\n      Less Than 8 ft.\n      1\n      7\n      8\n      1\n      1\n      20211019\n      LAL\n      GSW\n    \n    \n      18\n      Shot Chart Detail\n      0022100002\n      642\n      201939\n      Stephen Curry\n      1610612744\n      Golden State Warriors\n      4\n      5\n      34\n      ...\n      Center(C)\n      24+ ft.\n      26\n      48\n      260\n      1\n      1\n      20211019\n      LAL\n      GSW\n    \n  \n\n5 rows × 24 columns\n\n\n\nWe also notice that there are two columns LOC_X and LOC_Y shows the coordinates of the attempts. We will use it to draw the heatmap. The full code for drawing out the court draw_court is folded below. It is from Bradley Fay GitHub.\n\n\n\n\n\n\nNote\n\n\n\nNote that, although draw_cort is long, it is not hard to understand. It just draws a court piece by piece.\n\n\n\n\nCode\nfrom matplotlib.patches import Circle, Rectangle, Arc\nimport matplotlib.pyplot as plt\n\n\ndef draw_court(ax=None, color='gray', lw=1, outer_lines=False):\n    \"\"\"\n    Returns an axes with a basketball court drawn onto to it.\n\n    This function draws a court based on the x and y-axis values that the NBA\n    stats API provides for the shot chart data.  For example, the NBA stat API\n    represents the center of the hoop at the (0,0) coordinate.  Twenty-two feet\n    from the left of the center of the hoop in is represented by the (-220,0)\n    coordinates.  So one foot equals +/-10 units on the x and y-axis.\n    \"\"\"\n    if ax is None:\n        ax = plt.gca()\n\n    # Create the various parts of an NBA basketball court\n\n    # Create the basketball hoop\n    hoop = Circle((0, 0), radius=7.5, linewidth=lw, color=color, fill=False)\n\n    # Create backboard\n    backboard = Rectangle((-30, -7.5), 60, -1, linewidth=lw, color=color)\n\n    # The paint\n    # Create the outer box 0f the paint, width=16ft, height=19ft\n    outer_box = Rectangle((-80, -47.5), 160, 190, linewidth=lw, color=color,\n                          fill=False)\n    # Create the inner box of the paint, widt=12ft, height=19ft\n    inner_box = Rectangle((-60, -47.5), 120, 190, linewidth=lw, color=color,\n                          fill=False)\n\n    # Create free throw top arc\n    top_free_throw = Arc((0, 142.5), 120, 120, theta1=0, theta2=180,\n                         linewidth=lw, color=color, fill=False)\n    # Create free throw bottom arc\n    bottom_free_throw = Arc((0, 142.5), 120, 120, theta1=180, theta2=0,\n                            linewidth=lw, color=color, linestyle='dashed')\n    # Restricted Zone, it is an arc with 4ft radius from center of the hoop\n    restricted = Arc((0, 0), 80, 80, theta1=0, theta2=180, linewidth=lw,\n                     color=color)\n\n    # Three point line\n    # Create the right side 3pt lines, it's 14ft long before it arcs\n    corner_three_a = Rectangle((-220, -47.5), 0, 140, linewidth=lw,\n                               color=color)\n    # Create the right side 3pt lines, it's 14ft long before it arcs\n    corner_three_b = Rectangle((220, -47.5), 0, 140, linewidth=lw, color=color)\n    # 3pt arc - center of arc will be the hoop, arc is 23'9\" away from hoop\n    three_arc = Arc((0, 0), 475, 475, theta1=22, theta2=158, linewidth=lw,\n                    color=color)\n\n    # Center Court\n    center_outer_arc = Arc((0, 422.5), 120, 120, theta1=180, theta2=0,\n                           linewidth=lw, color=color)\n    center_inner_arc = Arc((0, 422.5), 40, 40, theta1=180, theta2=0,\n                           linewidth=lw, color=color)\n\n    # List of the court elements to be plotted onto the axes\n    court_elements = [hoop, backboard, outer_box, inner_box, top_free_throw,\n                      bottom_free_throw, restricted, corner_three_a,\n                      corner_three_b, three_arc, center_outer_arc,\n                      center_inner_arc]\n\n    if outer_lines:\n        # Draw the half court line, baseline and side out bound lines\n        outer_lines = Rectangle((-250, -47.5), 500, 470, linewidth=lw,\n                                color=color, fill=False)\n        court_elements.append(outer_lines)\n\n    # Add the court elements onto the axes\n    for element in court_elements:\n        ax.add_patch(element)\n\n    return ax\n\n\n\n# Create figure and axes\nfig = plt.figure(figsize=(6, 6))\nax = fig.add_axes([0, 0, 1, 1])\n\n# Plot hexbin of shots\nax.hexbin(df['LOC_X'], df['LOC_Y'], gridsize=(30, 30), extent=(-300, 300, 0, 940), bins='log', cmap='Blues')\nax = draw_court(ax, 'black')\n\n# Annotate player name and season\nax.text(0, 1.05, 'Stephen Curry\\n2021-22 Regular Season', transform=ax.transAxes, ha='left', va='baseline')\n\n# Set axis limits\n_ = ax.set_xlim(-250, 250)\n_ = ax.set_ylim(0, 400)"
  },
  {
    "objectID": "contents/2/02-.html",
    "href": "contents/2/02-.html",
    "title": "2  Python Basics",
    "section": "",
    "text": "This section is based on [1].\nThere are several built-in data structures in Python. Here is an (incomplete) list:\n\nNone\nBoolean – True, False\nNumeric Types — int, float, complex\nText Sequence Type — str\nSequence Types — list\nMap type - dict\n\nWe will cover numeric types and strings in this section. The rests are either simple that are self-explained, or not simple that will be discussed later.\n\n\nNumeric types are represented by numbers. If there are no confusions, Python will automatically detect the type.\n\nx = 1 # x is an int.\ny = 2.0 # y is a float.\n\nPython can do math just like other programming languages. The basic math operations are listed as follows.\n\n+, -, *, /, >, <, >=, <= works as normal.\n** is the power operation.\n% is the mod operation.\n!= is not equal\n\n\n\n\nScalars are represented by numbers and strings are represented by quotes. Example:\n\nx = 1       # x is a scalar.\ny = 's'     # y is a string with one letter.\nz = '0'     # z loos like a number, but it is a string.\nw = \"Hello\" # w is a string with double quotes.\n\nHere are some facts.\n\nFor strings, you can use either single quotes ' or double quotes \".\n\\ is used to denote escaped words. You may find the list Here.\nThere are several types of scalars, like int, float, etc.. Usually Python will automatically determine the type of the data, but sometimes you may still want to declare them manually.\nYou can use int(), str(), etc. to change types.\n\nAlthough str is a built-in type, there are tons of tricks with str, and there are tons of packages related to strings. Generally speaking, to play with strings, we are interested in two types of questions.\n\nPut information together to form a string.\nExtract information from a string. We briefly talk about these two tasks.\n\n\n\n\n\n\n\nNote\n\n\n\nThere is a very subtle relations between the variable / constant and the name of the variable / constant. We will talk about these later."
  },
  {
    "objectID": "contents/2/02-.html#fundamentals",
    "href": "contents/2/02-.html#fundamentals",
    "title": "2  Python Basics",
    "section": "2.2 Fundamentals",
    "text": "2.2 Fundamentals\nThis section is mainly based on [2].\n\n2.2.1 Indentation\nOne key feature about Python is that its structures (blocks) is determined by Indentation.\nLet’s compare with other languages. Let’s take C as an example.\n\n/*This is a C function.*/\nint f(int x){return x;}\n\nThe block is defined by {} and lines are separated by ;. space and newline are not important when C runs the code. It is recommended to write codes in a “beautiful, stylish” format for readibility, as follows. However it is not mandatary.\n\n/*This is a C function.*/\nint f(int x) {\n   return x;\n}\n\nIn Python, blocks starts from : and then are determined by indents. Therefore you won’t see a lot of {} in Python, and the “beautiful, stylish” format is mandatary.\n\n# This is a Python function.\ndef f(x):\n    return x\n\nThe default value for indentation is 4 spaces, which can be changed by users. We will just use the default value in this course.\n\n\n2.2.2 Binary operators and comparisons\nMost binary operators behaves as you expected. Here I just want to mention == and is.\n\n== is testing whehter these two objects have the same value.\nis is testing whether these two objects are exactly the same.\n\n\n\n\n\n\n\nNote\n\n\n\nYou may use id(x) to check the id of the object x. Two objects are identical if they have the same id.\n\n\n\n\n\n2.2.3 import\nIn Python a module is simply a file with the .py extension containing Python code. Assume that we have a Python file example.py stored in the folder assests/codes/. The file is as follows.\n\n# from assests/codes/example.py\ndisplay(Markdown(text))\ndef f(x):\n    print(x)\n\nA = 'You get me!'\n\nYou may get access to this function and this string in the following way.\n\nfrom assests.codes import example\n\nexample.f(example.A)\n\nYou get me!\n\n\n\n\n2.2.4 Comments\nAny text preceded by the hash mark (pound sign) # is ignored by the Python interpreter. In many IDEs you may use hotkeys to directly toggle multilines as comments. For example, in VS Code the default setting for toggling comments is ctrl+/.\n\n\n2.2.5 Dynamic references, strong types\nIn some programming languages, you have to declare the variable’s name and what type of data it will hold. If a variable is declared to be a number, it can never hold a different type of value, like a string. This is called static typing because the type of the variable can never change.\nPython is a dynamically typed language, which means you do not have to declare a variable or what kind of data the variable will hold. You can change the value and type of data at any time. This could be either great or terrible news.\nOn the other side, “dynamic typed” doesn’t mean that types are not important in Python. You still have to make sure that the types of all variables meet the requirements of the operations used.\n\na = 1\nb = 2\nb = '2'\nc = a + b\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n\nIn this example, b was first assigned by a number, and then it was reassigned by a str. This is totally fine since Python is dynamically types. However later when adding a and b, the type error occurs since you cannot add a number and a str.\n\n\n\n\n\n\nNote\n\n\n\nYou may always use type(x) to detect the type of the object x.\n\n\n\n\n2.2.6 Everything is an object\nEvery number, string, data structure, function, class, module, and so on exists in the Python interpreter in its own “box”, which is referred to as a Python object.\nEach object has an associated type (e.g., string or function) and internal data. In practice this makes the language very flexible, as even functions can be treated like any other object.\nEach object might have attributes and/or methods attached.\n\n\n2.2.7 Mutable and immutable objects\nAn object whose internal state can be changed is mutable. On the other hand, immutable doesn’t allow any change in the object once it has been created.\nSome objects of built-in type that are mutable are:\n\nLists\nDictionaries\nSets\n\nSome objects of built-in type that are immutable are:\n\nNumbers (Integer, Rational, Float, Decimal, Complex & Booleans)\nStrings\nTuples\n\n\nExample 2.1 (Tuples are not really “immutable”) You can treat a tuple as a container, which contains some objects. The relations between the container and its contents are immutable, but the objects it holds might be mutable. Please check the following example.\n\ncontainer = ([1], [2])\nprint('This is `container`: ', container)\nprint('This is the id of `container`: ', id(container))\nprint('This is the id of the first list of `container`: ', id(container[0]))\n\ncontainer[0].append(2)\nprint('This is the new `container`: ', container)\nprint('This is the id of the new `container`: ', id(container))\nprint('This is the id of the first list (which is updated) of the new `container`: ', id(container[0]))\n\nThis is `container`:  ([1], [2])\nThis is the id of `container`:  2437774693952\nThis is the id of the first list of `container`:  2437774752256\nThis is the new `container`:  ([1, 2], [2])\nThis is the id of the new `container`:  2437774693952\nThis is the id of the first list (which is updated) of the new `container`:  2437774752256\n\n\nYou can see that the tuple container and its first object stay the same, although we add one element to the first object."
  },
  {
    "objectID": "contents/2/02-.html#flows-and-logic",
    "href": "contents/2/02-.html#flows-and-logic",
    "title": "2  Python Basics",
    "section": "2.3 Flows and Logic",
    "text": "2.3 Flows and Logic\n\n2.3.1 for loop\n\n\n2.3.2 if conditional control"
  },
  {
    "objectID": "contents/2/02-.html#list",
    "href": "contents/2/02-.html#list",
    "title": "2  Python Basics",
    "section": "2.4 list",
    "text": "2.4 list\n\n\n\n\n\n\nNote\n\n\n\nIn Python, a list is an ordered sequence of object types and a string is an ordered sequence of characters.\n\n\n\nAccess to the data\nSlicing\nMethods\n\nappend and +\nextend\npop\nremove\n\nin\nfor\nlist()\nsorted\nstr.split\nstr.join\n\n\n2.4.1 List Comprehension\nList Comprehension is a convenient way to create lists based on the values of an existing list. It cannot provide any real improvement to the performance of the codes, but it can make the codes shorter and easier to read.\nThe format of list Comprehension is\nnewlist = [expression for item in iterable if condition == True]"
  },
  {
    "objectID": "contents/2/02-.html#dict",
    "href": "contents/2/02-.html#dict",
    "title": "2  Python Basics",
    "section": "2.5 dict",
    "text": "2.5 dict\n\nAccess to the data\nMethods\n\ndirectly add items\nupdate\nget\nkeys\nvalues\nitems\n\ndict()\ndictionary comprehension"
  },
  {
    "objectID": "contents/2/02-.html#exercises",
    "href": "contents/2/02-.html#exercises",
    "title": "2  Python Basics",
    "section": "2.6 Exercises",
    "text": "2.6 Exercises\nMost problems are based on [3], [1] and [4].\n\nExercise 2.1 (Indentation) Please tell the differences between the following codes. If you don’t understand for don’t worry about it. Just focus on the indentation and try to understand how the codes work.\n\nfor i in range(5):\n    print('Hello world!')\nprint('Hello world!')\n\n\nfor i in range(5):\n    print('Hello world!')\n    print('Hello world!')\n\n\nfor i in range(5):\nprint('Hello world!')\nprint('Hello world!')\n\n\nfor i in range(5):\n    pass\nprint('Hello world!')\nprint('Hello world!')\n\n\n\nExercise 2.2 (Play with built-in data types) Please first guess the results of all expressions below, and then run them to check your answers.\n\nprint(True and True)\nprint(True or True)\nprint(False and True)\nprint((1+1>2) or (1-1<1))\n\n\n\nExercise 2.3 (== vs is) Please explain what happens below.\n\na = 1\nb = 1.0\nprint(type(a))\nprint(type(b))\n\nprint(a == b)\nprint(a is b)\n\n<class 'int'>\n<class 'float'>\nTrue\nFalse\n\n\n\n\nExercise 2.4 (Play with strings) Please excute the code below line by line and explain what happens in text cells.\n\n# 1\nanswer = 10\nwronganswer = 11\ntext1 = \"The answer to this question is {}. If you got {}, you are wrong.\".format(answer, wronganswer)\nprint(text1)\n\n# 2\nvar = True\ntext2 = \"This is {}.\".format(var)\nprint(text2)\n\n# 3\nword1 = 'Good '\nword2 = 'buy. '\ntext3 = (word1 + word2) * 3\nprint(text3)\n\n# 4\nsentence = \"This is\\ngood enough\\nfor a exercise to\\nhave so many parts. \" \\\n           \"We would also want to try this symbol: '. \" \\\n           \"Do you know how to type \\\" in double quotes?\"\nprint(sentence)\n\nThe answer to this question is 10. If you got 11, you are wrong.\nThis is True.\nGood buy. Good buy. Good buy. \nThis is\ngood enough\nfor a exercise to\nhave so many parts. We would also want to try this symbol: '. Do you know how to type \" in double quotes?\n\n\n\n\nExercise 2.5 (split and join) \nPlease excute the code below line by line and explain what happens in text cells.\n\n\nExercise 2.6 (List reference) \n\nGiven the list a, make a new reference b to a. Update the first entry in b to be 0. What happened to the first entry in a? Explain your answer in a text block.\nGiven the list a, make a new copy b of the list a using the function list. Update the first entry in b to be 0. What happened to the first entry in a? Explain your answer in a text block.\n\n\n\nExercise 2.7 (List comprehension) Given a list of numbers, use list comprehension to remove all odd numbers from the list:\n\nnumbers = [3,5,45,97,32,22,10,19,39,43]\n\n\n\nExercise 2.8 (More list comprehension) \nUse list comprehension to find all of the numbers from 1-1000 that are divisible by 7.\n\n\nExercise 2.9 (More list comprehension) \nCount the number of spaces in a string.\n\n\nExercise 2.10 (More list comprehension) \nUse list comprehension to get the index and the value as a tuple for items in the list ['hi', 4, 8.99, 'apple', ('t,b', 'n')]. Result would look like [(index, value), (index, value), ...].\n\n\nExercise 2.11 (More list comprehension) \nUse list comprehension to find the common numbers in two lists (without using a tuple or set) list_a = [1, 2, 3, 4], list_b = [2, 3, 4, 5]."
  },
  {
    "objectID": "contents/2/02-.html#projects",
    "href": "contents/2/02-.html#projects",
    "title": "2  Python Basics",
    "section": "2.7 Projects",
    "text": "2.7 Projects\nMost projects are based on [2], [5].\n\nExercise 2.12 (Determine the indefinite article) \nPlease finish the following tasks. 1. Please construct a list aeiou that contains all vowels. 2. Given a word word, we would like to find the indefinite article article before word. (Hint: the article should be an if the first character of word is a vowel, and a if not.)\n\n\n\nClick for Hint.\n\n\nSolution. Consider in, .lower() and if structure.\n\n\n\nExercise 2.13 (Datetime and files names) \nWe would like to write a program to quickly generate N files. Every time we run the code, N files will be generated. We hope to store all files generated and organize them in a neat way. To achieve this, one way is to create a subfolder for each run and store all files generated during that run in the particular subfolder. Since we would like to make it fast, the real point of this task is to find a way to automatically generate the file names for the files generated and the folder names for the subfolders generated. You don’t need to worry about the contents of the files and empty files are totally fine for this problem.\n\n\n\nClick for Hint.\n\n\nSolution. One way to automatically generate file names and folder names is to use the date and the time when the code is run. Please check datetime package for getting and formatting date/time, and os packages for playing with files and folders.\n\n\n\nExercise 2.14 (Color the Gnomic data) We can use ASCII color codes in the string to change the color of strings, as an example \\033[91m for RED and \\033[94m for BLUE. See the following example.\n\nprint('\\033[91m'+'red'+'\\033[92m'+'green'+'\\033[94m'+'blue'+'\\033[93m'+'yellow')\n\nredgreenblueyellow\n\n\nConsider an (incomplete) Gnomic data given below which is represented by a long sequence of A, C, T and G. Please color it using ASCII color codes.\n\nGnomicdata = 'TCGATCTCTTGTAGATCTGTTCTCTAAACGAACTTTAAAATCTGTGTGGCTGTCACTCGG'\\\n             'CTGCATGCTTAGTGCACTCACGCAGTATAATTAATAACTAATTACTGTCGTTGACAGGAC'\\\n             'ACGAGTAACTCGTCTATCTTCTGCAGGCTGCTTACGGTTTCGTCCGTGTTGCAGCCGATC'\\\n             'ATCAGCACATCTAGGTTTTGTCCGGGTGTGACCGAAAGGTAAGATGGAGAGCCTTGTCCC'\\\n             'TGGTTTCAACGAGAAAACACACGTCCAACTCAGTTTGCCTGTTTTACAGGTTCGCGACGT'\\\n             'GCTCGTACGTGGCTTTGGAGACTCCGTGGAGGAGGTCTTATCAGAGGCACGTCAACATCT'\\\n             'TAAAGATGGCACTTGTGGCTTAGTAGAAGTTGAAAAAGGCGTTTTGCCTCAACTTGAACA'\\\n             'GCCCTATGTGTTCATCAAACGTTCGGATGCTCGAACTGCACCTCATGGTCATGTTATGGT'\\\n             'TGAGCTGGTAGCAGAACTCGAAGGCATTCAGTACGGTCGTAGTGGTGAGACACTTGGTGT'\\\n             'CCTTGTCCCTCATGTGGGCGAAATACCAGTGGCTTACCGCAAGGTTCTTCTTCGTAAGAA'\\\n             'CGGTAATAAAGGAGCTGGTGGCCATAGTTACGGCGCCGATCTAAAGTCATTTGACTTAGG'\\\n             'CGACGAGCTTGGCACTGATCCTTATGAAGATTTTCAAGAAAACTGGAACACTAAACATAG'\n\n\n\n\n\n\n[1] Youens-Clark, K. (2020). Tiny python projects. Manning Publications.\n\n\n[2] McKinney, W. (2017). Python for data analysis: Data wrangling with pandas, NumPy, and IPython. O’Reilly Media.\n\n\n[3] Shaw, Z. A. (2017). Learn python 3 the hard way. Addison Wesley.\n\n\n[4] Sweigart, A. (2020). Automate the boring stuff with python, 2nd edition practical programming for total beginners: Practical programming for total beginners. No Starch Press.\n\n\n[5] Klosterman, S. (2021). Data science projects with python: A case study approach to gaining valuable insights from real data with machine learning. Packt Publishing, Limited."
  },
  {
    "objectID": "contents/references.html",
    "href": "contents/references.html",
    "title": "References",
    "section": "",
    "text": "[1] Klosterman, S.\n(2021). Data\nscience projects with python: A case study approach to gaining valuable\ninsights from real data with machine learning. Packt\nPublishing, Limited.\n\n\n[2] McKinney, W.\n(2017). Python for data analysis: Data wrangling with pandas, NumPy,\nand IPython. O’Reilly Media.\n\n\n[3] Shaw, Z. A.\n(2017). Learn\npython 3 the hard way. Addison Wesley.\n\n\n[4] Sweigart, A.\n(2020). Automate the\nboring stuff with python, 2nd edition practical programming for total\nbeginners: Practical programming for total beginners. No Starch\nPress.\n\n\n[5] Youens-Clark, K.\n(2020). Tiny python\nprojects. Manning Publications."
  },
  {
    "objectID": "contents/3/03-.html",
    "href": "contents/3/03-.html",
    "title": "1  Data Science tricks",
    "section": "",
    "text": "The main reference for this chapter is [1]."
  },
  {
    "objectID": "contents/3/03-.html#numpy",
    "href": "contents/3/03-.html#numpy",
    "title": "1  Data Science tricks",
    "section": "1.1 numpy",
    "text": "1.1 numpy\nThe basic data structure for numpy is numpy.ndarray. You may treat it as a generalized version of lists. However it can do so much more than the build-in list.\nTo use numpy, we just import it. In most cases you would like to use the alias np.\n\nimport numpy as np\n\n\n\n\n\n\n\nNote\n\n\n\nIn many cases, numpy.ndarray is a huge object since it stores tons of data. Therefore many of the operations related to numpy.ndarray are “in-place” by default. This means that if you don’t explicitly ask for a copy, there will be only one copy of the array and all later operations make changes to the original one.\nHowever there are many cases that\n\n\n\n1.1.1 Create np.ndarray\n\nconvert a list into a numpy array.\nnp.zeros\nnp.ones\nnp.random.rand\nnp.arange\n\n\n\n\n\n\n\nNote\n\n\n\nPlease be very careful about the format of the input. For example, when you want to specify the dimension of the array, using np.zeros, you need to input a tuple. On the other hand, when using np.random.rand, you just directly input the dimensions one by one.\n\nimport numpy as np\n\nnp.zeros((3, 2))\nnp.random.rand(3, 2)\n\nIn this case, the official documents are always your friend.\n\n\n\n\n1.1.2 Basic indexing and slicing\n\n\n1.1.3 Common attributes and methods\n\nshape\ndtype\nAny arithmetic operations between equal-size arrays applies the operation element-wise.\n\n\n\n1.1.4 Fancy indexing\n\n\n1.1.5 Transposing Arrays and Swapping Axes\n\naxis=n is very important.\n\n\n\n1.1.6 Mathematical and Statistical Methods\n\nmean\nsum\nstd, var\ncumsum\nmax and min\nmaximum and minimum\nargmin, argmax\nnp.sort\nunique\nany\ndot: Matrix multiplication\nconcatenate\n\n\n\n1.1.7 Examples\n\nExample 1.1 (Random walks) Adam walks randomly along the axis. He starts from 0. Every step he has equal possibility to go left or right. Please simulate this process.\nUse choices to record the choice of Adam at each step. We may generate a random array where 0 represents left and 1 represents right.\nUse positions to record the position of Adam at each step. Using choices, the position is +1 if we see a 1 and the position is -1 if we see a 0. So the most elegent way to perform this is to\n\nConvert choices from {0, 1} to {-1, 1}.\nTo record the starting position, we attach 0 to the beginning of the new choices.\nApply cumsum to choices to get positions.\n\n\nimport numpy as np\n\nstep = 30\nchoices = np.random.randint(2, size=step)\nchoices = choices * 2 - 1\nchoices = np.concatenate(([0], choices))\npositions = choices.cumsum()\n\nimport matplotlib.pyplot as plt\nplt.plot(positions)\n\n\n\n\n\n\nExample 1.2 (Many random walks) We mainly use numpy.ndarray to write the code in the previous example. The best part here is that it can be easily generalized to many random walks.\nStill keep choices and positions in mind. Now we would like to deal with multiple people simutanously. Each row represents one person’s random walk. All the formulas stay the same. We only need to update the dimension setting in the previous code.\n\nUpdate size in np.random.randint.\nUpdate [0] to np.zeros((N, 1)) in concatenate.\nFor cumsum and concatenate, add axis=1 to indicate that we perform the operations along axis 1.\nWe plot each row in the same figure. plt.legend is used to show the label for each line.\n\n\nimport numpy as np\n\nstep = 30\nN = 3\nchoices = np.random.randint(2, size=(N, step))\nchoices = choices * 2 - 1\nchoices = np.concatenate((np.zeros((N, 1)), choices), axis=1)\npositions = choices.cumsum(axis=1)\n\nimport matplotlib.pyplot as plt\nfor row in positions:\n    plt.plot(row)\nplt.legend([1, 2, 3])\n\n<matplotlib.legend.Legend at 0x2b78af1de20>\n\n\n\n\n\n\n\nExample 1.3 (Analyze positions) We play with the numpy array positions to get some information about the random walks of three generated in the previous example.\n\nThe maximal position:\n\n\npositions.max()\n\n4.0\n\n\n\nThe maximal position for each one:\n\n\npositions.max(axis=1)\n\narray([4., 3., 1.])\n\n\n\nThe maximal position across all three for each step:\n\n\npositions.max(axis=0)\n\narray([0., 1., 2., 3., 2., 1., 2., 3., 4., 3., 2., 3., 4., 3., 4., 3., 4.,\n       3., 2., 3., 2., 3., 4., 3., 2., 1., 2., 3., 2., 3., 2.])\n\n\n\nCheck whether anyone once got to the position 3:\n\n\n(positions>=3).any(axis=1)\n\narray([ True,  True, False])\n\n\n\nThe number of people who once got to the position 3:\n\n\n(positions>=3).any(axis=1).sum()\n\n2\n\n\n\nWhich step for each one gets to the right most position:\n\n\npositions.argmax(axis=1)\n\narray([ 8, 19,  3], dtype=int64)"
  },
  {
    "objectID": "contents/3/03-.html#pandas",
    "href": "contents/3/03-.html#pandas",
    "title": "1  Data Science tricks",
    "section": "1.2 pandas",
    "text": "1.2 pandas\nThe basic data structure for pandas is pandas.DataFrame. You may treat it as a generalized version of tables.\nTo use pandas, we just import it. In most cases you would like to use the alias pd.\n\nimport pandas as pd\n\nSince DataFrame is more like a table, the biggest questions here is not to do computations (which is still very important), but to retrieve, search, sort, merge, etc.. those data.\n\n1.2.1 Series and DataFrame\n\n\n1.2.2 Index\n\n\n1.2.3 Reindex\n\n\n1.2.4 Dropping entries\n\n\n1.2.5 Indexing, Selection, and Filtering\n\n.iloc, .loc\n\n\n\n1.2.6 Arithmetic and Data Alignment"
  },
  {
    "objectID": "contents/3/03-.html#matplotlib",
    "href": "contents/3/03-.html#matplotlib",
    "title": "1  Data Science tricks",
    "section": "1.3 matplotlib",
    "text": "1.3 matplotlib"
  },
  {
    "objectID": "contents/3/03-.html#seaborn-and-others",
    "href": "contents/3/03-.html#seaborn-and-others",
    "title": "1  Data Science tricks",
    "section": "1.4 seaborn and others",
    "text": "1.4 seaborn and others"
  },
  {
    "objectID": "contents/3/03-.html#exercises",
    "href": "contents/3/03-.html#exercises",
    "title": "1  Data Science tricks",
    "section": "1.5 Exercises",
    "text": "1.5 Exercises\n\nExercise 1.1 (Compare two numpy arraies) \nConsider two numpy arraies x and y. Compare them entry by entry. We would like to know how many are the same.\n\n\n\nClick to expand.\n\n\nSolution. Note that bool values True and False can be treated as numbers 1 and 0.\n\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([2, 1, 4, 4, 5])\n\nnumofsame = np.sum(x == y)\nprint(numofsame)\n\n2"
  },
  {
    "objectID": "contents/3/03-.html#projects",
    "href": "contents/3/03-.html#projects",
    "title": "1  Data Science tricks",
    "section": "1.6 Projects",
    "text": "1.6 Projects\n\n1.6.1 project\n\nopen and parse a CSV file\ndo some operations\ndecipher (replace letters / frequency analysis)\n\n\n\n\n\n[1] McKinney, W. (2017). Python for data analysis: Data wrangling with pandas, NumPy, and IPython. O’Reilly Media."
  }
]