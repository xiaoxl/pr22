{
  "hash": "55c45348ef5059287a6cfe981fa58d0b",
  "result": {
    "markdown": "\n\n# R for Data Sciences\n\n\nThe main reference for this Chapter is @Wic2017.\n\n\n\n## `tibble`\n\n`tidyverse` mainly deals with `tibble` instead of `data.frame`. Therefore this is where we start.\n\n`tibble` is a `data.frame` with different attributes and requirements. The package `tibble` provides support for `tibble`. It is included in `tidyverse`. To load it, you just use the code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching packages --------------------------------------- tidyverse 1.3.1 --\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nv ggplot2 3.3.6     v purrr   0.3.4\nv tibble  3.1.7     v dplyr   1.0.9\nv tidyr   1.2.0     v stringr 1.4.0\nv readr   2.1.2     v forcats 0.5.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\n\n\n### Create tibbles\nHere is an example of creating tibbles.\n\n::: {#exm-}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl <- tibble(x=1:5, y=1, z=x^2+y)\ntbl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 3\n      x     y     z\n  <int> <dbl> <dbl>\n1     1     1     2\n2     2     1     5\n3     3     1    10\n4     4     1    17\n5     5     1    26\n```\n:::\n\n```{.r .cell-code}\nattributes(tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$class\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n$row.names\n[1] 1 2 3 4 5\n\n$names\n[1] \"x\" \"y\" \"z\"\n```\n:::\n:::\n\nNote that it is more flexible to create a tibble since `tibble()` will automatically recycle inputs and allows you to refer to variables that you just created.\n:::\n\n\n::: {.callout-note}\nIn the past (for a very long time), when using `data.frame()` to create a `data.frame`, it will automatically convert strings to factors. This is changed recently that the default setting is not to convert. \n\nWhen using `tibble()` to create a `tibble`, the type of the inputs will never be changed.\n:::\n\n\n::: {.callout-note}\nIn `tibble` you may use *nonsyntactic* names as column names, which are invalid R variable names. To refer to these variables, you need to surround them with backticks `.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb <- tibble(\n    `:)` = \"smile\",\n    ` ` = \"space\",\n    `2000` = \"number\"\n)\ntb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 3\n  `:)`  ` `   `2000`\n  <chr> <chr> <chr> \n1 smile space number\n```\n:::\n:::\n\n\n:::\n\n### Differences between tibble and data.frame.\n\n\n#### Printing\nTibbles have a refined print method that shows only the first 10 rows and all the columns that fit on screen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeck <- tibble(suit=rep(c('spades', 'hearts', 'clubs', 'diamonds'), 13), face=rep(1:13, 4))\ndeck\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 52 x 2\n   suit      face\n   <chr>    <int>\n 1 spades       1\n 2 hearts       2\n 3 clubs        3\n 4 diamonds     4\n 5 spades       5\n 6 hearts       6\n 7 clubs        7\n 8 diamonds     8\n 9 spades       9\n10 hearts      10\n# ... with 42 more rows\n```\n:::\n:::\n\n\n\n#### Subsetting\n\nTo get a single value, `[[]]` or `$` should be used, just like for `data.frame`. These two are almost the same. The only difference is that `[[]]` accepts positions, but `$` only accepts names.\n\nTo be used in a pipe, the special placeholder `.` will be used. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeck %>% .$face\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13  1  2  3  4  5  6  7  8  9 10 11 12\n[26] 13  1  2  3  4  5  6  7  8  9 10 11 12 13  1  2  3  4  5  6  7  8  9 10 11\n[51] 12 13\n```\n:::\n:::\n\nWe will talk about pipes later.\n\n\n### `%>%` symbol\n`%>%` is the pipeline symbol, which is another way to connect several functions. Most functions in tidyverse have the first argument `data`, and both the input `data` and the output are tibbles. The syntax here is that `data %>% function(arguments)` is the same as `function(data, arguments)`. The benefit is that it is easier to have many functions consecutively applied to the data. Please see the following example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% function1(arguments1)\n    %>% function2(arguments2)\n    %>% function3(arguments3)\n    %>% function4(arguments4)\n\nfunction4(function3(function2(function1(data, arguments1), arguments2), arguments3), arguments4)\n\ndata2 <- function1(data, arguments1)\ndata3 <- function2(data2, arguments2)\ndata4 <- function3(data3, arguments3)\nfunction4(data4, arguments4)\n```\n:::\n\nThe readability of the first one is much better than the second one. Comparing to the third one, we don't need to create a lot of intermedia temporary variables.\n\n\n## Tidy Data \n\nThe same underlying data can be represented in multiple ways. The following example shows the same data organized in four different ways.\n\n\n::: {#exm-tidydatasets}\n\n\n::: {.cell}\n\n:::\n\n\n\n1. `table1`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country      year  cases population\n  <chr>       <int>  <int>      <int>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n:::\n:::\n\n\n2. `table2`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 x 4\n   country      year type            count\n   <chr>       <int> <chr>           <int>\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n```\n:::\n:::\n\n\n3. `table3`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  country      year rate             \n  <chr>       <int> <chr>            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n```\n:::\n:::\n\n\n\n4. Spread across two tibbles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable4a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n  country     `1999` `2000`\n  <chr>        <int>  <int>\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n```\n:::\n\n```{.r .cell-code}\ntable4b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n  country         `1999`     `2000`\n  <chr>            <int>      <int>\n1 Afghanistan   19987071   20595360\n2 Brazil       172006362  174504898\n3 China       1272915272 1280428583\n```\n:::\n:::\n\n\n:::\n\n\n::: {#def-}\nA dataset is *tidy* if\n\n1. Each variable have its own column.\n2. Each observation have its own row.\n3. Each value have its oven cell.\n:::\nThese three conditions are interrelated because it is impossible to only satisfy two of the three. In pratical, we need to follow the instructions:\n\n1. Put each dataset in a tibble.\n2. Put each variable in a column.\n\n*Tidy* data is a consistent way to organize your data in R. The main advantages are:\n\n1. It is one consistent way of storing data. In other words, this is a consistent data structure that can be used in many cases.\n2. To placing variables in columns allows R's vectorized nature to shine.\n\nAll packages in the tidyverse are designed to work with tidy data. \n\n### Tidying datasets\nMost datasets are untidy:\n\n- One variable might be spread across multiple columns.\n- One observation might be scattered across multiple rows.\n\n#### `gather()` and `pivot_longer()`\nA common problem is that the column names are not names of variables, but values of a variable. For example, `table4a` above has columns `1999` and `2000`. These two names are actually the values of a variable `year`. In addition, each row represents two observations, not one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable4a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n  country     `1999` `2000`\n  <chr>        <int>  <int>\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n```\n:::\n:::\n\nTo tidy this type of dataset, we need to `gather` those columns into a new pair of variables. We need three parameters:\n\n- The set of columns that represent values. In this case, those are `1999` and `2000`.\n- The name of the variable. In this case, it is `year`. We also name it a `key`.\n-The name of the variable whose values are spread over the cells. In this case, it is the number of `cases`. We also name it a `value`.\n\nThen we apply `gather`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable4a %>% gather(`1999`, `2000`, key='year', value='cases')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  country     year   cases\n  <chr>       <chr>  <int>\n1 Afghanistan 1999     745\n2 Brazil      1999   37737\n3 China       1999  212258\n4 Afghanistan 2000    2666\n5 Brazil      2000   80488\n6 China       2000  213766\n```\n:::\n:::\n\n\nWe can do the similar thing to `table4b`. Then we could combine the two tibbles together.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy4a <- table4a %>% \n    gather(`1999`, `2000`, key='year', value='cases')\ntidy4b <- table4b %>% \n    gather(`1999`, `2000`, key='year', value='population')\nleft_join(tidy4a, tidy4b)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = c(\"country\", \"year\")\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country     year   cases population\n  <chr>       <chr>  <int>      <int>\n1 Afghanistan 1999     745   19987071\n2 Brazil      1999   37737  172006362\n3 China       1999  212258 1272915272\n4 Afghanistan 2000    2666   20595360\n5 Brazil      2000   80488  174504898\n6 China       2000  213766 1280428583\n```\n:::\n:::\n\n\n`pivot_longer()` is an updated approach to `gather()`, designed to be both simpler to use and to handle more use cases. We recommend you use `pivot_longer()` for new code; `gather()` isn't going away but is no longer under active development.\n\nThe main arguments of `pivot_longer()` is `data`, `cols`, `names_to` and `values_to`. The `cols` in `data` will be longer. A column with the name set by `names_to` will be added. The values of the column is the column names of the `cols`. A column with the name set by `values_to` will be added. The values of this column is the cell value of the original data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable4a %>% pivot_longer(cols=c(`1999`, `2000`), names_to='year', values_to='cases')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  country     year   cases\n  <chr>       <chr>  <int>\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n```\n:::\n:::\n\n\n\n\n#### `spread()`\nAnother issuse is that an observation is scattered across multiple rows. Take `table2` as an example. \nAn observation is a country in a year, but each observation is spread across two rows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 x 4\n   country      year type            count\n   <chr>       <int> <chr>           <int>\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n```\n:::\n:::\n\nWe could also apply `spread()`. \n\n- The column that contains variable names, the `key` column. Here, it’s `type`.\n- The column that contains values forms multiple variables, the `value` column. Here, it’s `count`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspread(table2, key=type, value=count)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country      year  cases population\n  <chr>       <int>  <int>      <int>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n:::\n:::\n\n\n\n::: {.callout-note}\n`gather()` makes wide tables narrower and longer. `spread()` makes long tables shorter and wider.\n:::\n\n`pivot_wider()` is an updated approach to `spread()`, designed to be both simpler to use and to handle more use cases. We recommend you use `pivot_wider()` for new code; `spread()` isn't going away but is no longer under active development.\n\n\n#### `separate()`\n\n#### `unite()`\n\n## `dplyr`\n\n## `ggplot2`\n\n## Exercises\n\n\n::: {#exr-}\nHow can you tell if an object is a tibble?\n:::\n\n\n\n::: {#exr-}\nCompare and contrast the following operations on a `data.frame` and equivalent `tibble`. What is different? Why might the default data frame behaviors cause you frustration?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(abc = 1, xyz = \"a\")\ndf$x\ndf[, \"xyz\"]\ndf[, c(\"abc\", \"xyz\")]\n```\n:::\n\n\n\n:::\n\n\n\n::: {#exr-}\nIf you have the name of a variable stored in an object, e.g., `var <- \"xyz\"`, how can you extract the reference variable from a tibble? You may use the following codes to get a tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl <- tibble(abc = 1, xyz = \"a\")\n```\n:::\n\n\n:::\n\n\n::: {#exr-}\nPractice referring to nonsyntactic names in the following data.frame by:\n\na. Extracting the variable called 1.\nb. Creating a new column called 3, which is 2 divided by 1.\nc. Renaming the columns to one, two, and three:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nannoying <- tibble(\n`1` = 1:10,\n`2` = `1` * 2 + rnorm(length(`1`))\n)\n```\n:::\n\n:::\n\n\n## Projects\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {#exr-}\nThis is a Python question. Please download the datasets from here. It is the same datasets as in @exm-tidydatasets. Please use Python to finish the following tasks.\n:::\n\n\n::: {#exr-}\nWhy are `gather()` and `spread()` not perfectly symmetrical? Carefully consider the following example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstocks <- tibble(\n    year = c(2015, 2015, 2016, 2016),\n    half = c( 1, 2, 1, 2),\n    return = c(1.88, 0.59, 0.92, 0.17)\n)\nstocks %>%\n    spread(year, return) %>%\n    gather(\"year\", \"return\", `2015`:`2016`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 3\n   half year  return\n  <dbl> <chr>  <dbl>\n1     1 2015    1.88\n2     2 2015    0.59\n3     1 2016    0.92\n4     2 2016    0.17\n```\n:::\n:::\n\n(Hint: look at the variable types and think about column `names`.)\n\nBoth `spread()` and `gather()` have a `convert` argument. What does it do?\n:::\n\n\n\n::: {#exr-}\nWhy does this code fail?\n\n::: {.cell}\n\n```{.r .cell-code}\ntable4a %>%\n    gather(1999, 2000, key = \"year\", value = \"cases\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `loc_validate()`:\n! Can't subset columns past the end.\ni Locations 1999 and 2000 don't exist.\ni There are only 3 columns.\n```\n:::\n:::\n\n\n:::\n\n",
    "supporting": [
      "08-_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}