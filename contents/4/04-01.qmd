




## Basic `pandas`

###  `Series` and `DataFrame`
A *Series* is a 1-d array-like object which has index. The default index is starting from `0`. You may change the index to be something assigned by you. Thus it can be treated as a generalization of a `dict`.

```{python}
#| echo: false
import pandas as pd
```
```{python}
obj = pd.Series([3, 1, 2, 4])
print(obj)
```
```{python}
obj2 = pd.Series([3, 1, 2, 4], index=['a', 'b', 'c', 'd'])
print(obj2)
```
```{python}
data3 = {'a': 3, 'b': 1, 'c': 2, 'd': 4}
obj3 = pd.Series(data3)
print(obj3)
```

A *DataFrame* represents a rectangular table of data and contains an ordered collection of columns, each of which can be a different value type. The DataFrame has both a row and column index; it can be thought of as a dict of Series all sharing the same index. When displaying a DataFrame, we may use `.head()` to just display the first few rows for efficicy. 

```{python}
import pandas as pd

data = {'a': [1, 2, 3, 4, 5, 6, 7],
        'b': [1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1],
        'c': ['a', 'b', 'c', 'd', 'e', 'f', 'g']}
df = pd.DataFrame(data)
df.head()
```


::: {.callout-note}
We may use the setting `columns=` or `index=` as well as the methods `.rename(columns=, index=)` to change the column names and the index names. See the following example.

```{python}
import numpy as np
import pandas as pd
data = pd.DataFrame(np.arange(16).reshape((4, 4)),
                    index=['Ohio', 'Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])
```

:::

### Accessing data
- A column in a DataFrame can be retrieved as a Series either by dict-like notation or by attribute. What one gets from this is a Series object.
    - dict-like notation: `df['a']`
    - by attribute: `df.a`. Note that if the name of the column is not suitable for attribute names, this method doesn't work.
- Rows are retrieved by `.loc` if using the index, and by `.iloc` if using the row number.

### Updating data
- Assign values to a column of a DataFrame will update that column. If the column doesn't exist, new column will be created.
- When assign values with non-existent row index, that part of the data will be discarded. 
- Any time if there are no values with a specific column and row, it will show as `NaN`. 

::: {#exm-}

```{python}
data = {'a': [1, 2, 3, 4],
        'b': [1.1, 2.1, 3.1, 4.1],
        'c': ['a', 'b', 'c', 'd']}
df = pd.DataFrame(data)

newcol = {1: 'good', 3: 'better', 5: 'best'}
df['d'] = pd.Series(newcol)
df
```

:::


### Indexing, Selection, and Filtering

- We can use logical expresssion to filter DataFrame.


```{python}
import pandas as pd
data = pd.DataFrame(np.arange(16).reshape((4, 4)),
                    index=['Ohio', 'Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])
data[data['one']>5]
```


- `.loc`, `.iloc`

```{python}
import pandas as pd
data = pd.DataFrame(np.arange(16).reshape((4, 4)),
                    index=['Ohio', 'Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])
print(data.loc['Colorado', ['two', 'three']])
print(data.iloc[2, [3, 0, 1]])
```


### essential

- indexing: very very import for pandas




- Dropping entries


- Arithmetic and Data Alignment
- Operations between DataFrame and Series
- Function Application and Mapping
- Sorting and Ranking
- Axis Indexes with Duplicate Labels
- Summarizing and Computing Descriptive Statistics
- Correlation and Covariance
- Unique Values, Value Counts, and Membership



- Reading and Writing Data in Text Format