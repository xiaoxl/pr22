


## Data structures
Main reference here is @Gro2014 and @Wic2017.

### Vectors {#sec-r-rb-ds-vectors}
Vector is one of the basic data structure in R. It is created by `c()` function. Somet You may store any data types in it. The data type inside a vector can be checked by `typeof` function.

```{r}
die <- c(1, 2, 3, 4, 5, 6)
typeof(die)
```
For consecutive numbers, an easier way to create vector is to use `:`.

```{r}
die <- 1:6
```


::: {.callout-caution}
Note that vector index starts from 1 in R, while list index starts from 0 in Python.
:::

```{r}
die[1]
```
When slicing with vectors, don't forget to use `c()`.

```{r}
die[c(2, 3)]
```

```{r}
die[2:3]
```

You may use `length()` function to get its length.

```{r}
length(die)
```



### Attributes

R objects may have attributes. Attributes won't be shown by default when you show the object. You may find the attributes of a R object by calling the `attributes()` function.

The following example show that the vector `die` defined in @sec-r-rb-ds-vectors doesn't have attributes.

```{r}
attributes(die)
```
The most common attributes of R objects are `names`. We could manually input the attributes. 

```{r}
names(die) <- c('one', 'two', 'three', 'four', 'five', 'six')
die
```
After the assignment, each value is assigned a name. Now `die` has an attribute `names`. It is still a vector despite the fact that it now has names.

```{r}
attributes(die)
names(die)
is.vector(die)
```




### matrices


```{r}
m <- matrix(c(1,2,3,4,5,6), nrow=2)
m[1, ]
```
A matrix has `dim` attribute.

```{r}
dim(m)
```

Note that by assigning and removing `dim` attribute, you may change the object between vectors and matrices.


::: {#exm-}

```{r}
m
is.matrix(m)
is.vector(m)
dim(m)
dim(m) <- NULL
m
is.matrix(m)
is.vector(m)
```
:::


::: {.callout-note}
The `dim` of a matrix/vector can be a length 3 vector. In this case, it will become an array. For simplicity we won't talk about array here.
:::



#### Lists
List is very similar to a vector. The main difference is that vector can only store values, while list can store objects. The most typical example of objects is another vector. Please see the following example.

::: {#exm-}

```{r}
c(1:2, 3:4)
list(1:2, 3:4)
```

:::




### `data.frame`
Data Frame is a 2d version of a list. You may think about it in terms of tables.

```{r}
df <- data.frame(face = c("ace", "two", "six"),
                 suit = c("clubs", "clubs", "clubs"),
                 value = c(1, 2, 3))
df
```


### Examples


::: {#exm-}
Consider a date.frame representing a deck of cards. Here we use `expand.grid()` to perform the Cartesian product.

```{r}
suit <- c('spades', 'hearts', 'clubs', 'diamonds')
face <- 1:13
deck <- expand.grid(suit, face)
head(deck)
```
We may assign names to change the column names.

```{r}
names(deck) <- c('suit', 'face')
head(deck)
```

Note that since `suit` and `face` are two vectors, `merge()` can also do the Cartesian product. `expand.grid()` is good for both vectors and data.frame.


```{r}
merge(suit, face)
```

:::


### Load data

#### build-in datasets
R has many build-in datasets. You may use `data()` to see all of them. Here are a few common datasets.

- `mtcars`: Motor Trend Car Road Tests: The data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973â€“74 models)

```{r}
data(mtcars)
```

- `iris`: iris data set gives the measurements in centimeters of the variables sepal length, sepal width, petal length and petal width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica.

```{r}
data(iris)
```

- `ToothGrowth`: ToothGrowth data set contains the result from an experiment studying the effect of vitamin C on tooth growth in 60 Guinea pigs. 

```{r}
data(ToothGrowth)
```

- `PlantGrowth`: Results obtained from an experiment to compare yields (as measured by dried weight of plants) obtained under a control and two different treatment condition.

```{r}
data(PlantGrowth)
```

- `USArrests`: This data set contains statistics about violent crime rates by us state.

```{r}
data(USArrests)
```

#### Read from files
The build-in `read.csv()` function can directly read `.csv` file into a data.frame.


::: {#exm-}
We use the file `yob1880.txt` from Chapter 5 here. Put the file in the working folder and run the following code.

```{r}
#| eval: false
df <- read.csv('yob1880.txt', header = FALSE)
head(df)
```

```{r}
#| echo: false
df <- read.csv('assests/datasets/yob1880.txt', header = FALSE) 
```
We may also manually assign columns names.

```{r}
names(df) <- c('name', 'sex', 'counts')
head(df)
```
:::

### Flow control

#### `for` loop


::: {#exm-}

```{r}
for (x in 1:10){
    print(x)
}
```

:::


#### `if-else` 


::: {#exm-}

```{r}
a <- 200
b <- 33

if (b > a) {
  print("b is greater than a")
} else if (a == b) {
  print("a and b are equal")
} else {
  print("a is greater than b")
}
```

:::


#### Functions


::: {#exm-}

```{r}
myfunction <- function() {
    die <- 1:6
    sum(die)
}

myfunction()
```

:::